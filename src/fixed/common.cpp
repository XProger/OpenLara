#include "common.h"
#include "lang/en.h"

EWRAM_DATA uint32 keys;
EWRAM_DATA RectMinMax viewport;
vec3i gCameraViewPos;
Matrix gMatrixStack[MAX_MATRICES];
Matrix* gMatrixPtr = gMatrixStack;

EWRAM_DATA Sphere gSpheres[2][MAX_SPHERES]; // EWRAM 1k

const FloorData* gLastFloorData;
FloorData gLastFloorSlant;
EWRAM_DATA TargetInfo tinfo;

EWRAM_DATA Settings gSettings;
EWRAM_DATA SaveGame gSaveGame;
EWRAM_DATA uint8 gSaveData[SAVEGAME_SIZE - sizeof(SaveGame)];

EWRAM_DATA int32 gCurTrack;
EWRAM_DATA int32 gAnimTexFrame;

int32 gLightAmbient;
int32 gRandTable[MAX_RAND_TABLE];
int32 gCaustics[MAX_CAUSTICS];
int32 gCausticsFrame;

EWRAM_DATA const char* const* STR = STR_EN;

EWRAM_DATA ExtraInfoLara playersExtra[MAX_PLAYERS];

#if defined(__GBA__)
    #include "TRACKS_AD4.h"
    #include "TITLE_SCR.h"
    #include "TITLE_PKD.h"
    #include "GYM_PKD.h"
    #include "LEVEL1_PKD.h"
    #include "LEVEL2_PKD.h"

    #define LEVEL_INFO(data, title, track, secrets) { data##_PKD, title, track, secrets }
#else
    #define LEVEL_INFO(data, title, track, secrets) { #data, title, track, secrets }
#endif

EWRAM_DATA LevelID gLevelID = LVL_TR1_TITLE;

const LevelInfo gLevelInfo[LVL_MAX] = {
// TR1
    LEVEL_INFO( TITLE     , STR_EMPTY         , TRACK_TR1_TITLE     , 0 ),
    LEVEL_INFO( GYM       , STR_TR1_GYM       , TRACK_NONE          , 0 ),
    LEVEL_INFO( LEVEL1    , STR_TR1_LEVEL1    , TRACK_TR1_CAVES     , 3 ),
    LEVEL_INFO( LEVEL2    , STR_TR1_LEVEL2    , TRACK_TR1_CAVES     , 3 ),
    //LEVEL_INFO( LEVEL3A   , STR_TR1_LEVEL3A   , TRACK_TR1_CAVES     , 5 ),
    //LEVEL_INFO( LEVEL3B   , STR_TR1_LEVEL3B   , TRACK_TR1_CAVES     , 3 ),
    //LEVEL_INFO( CUT1      , STR_EMPTY         , TRACK_TR1_CUT_1     , 0 ),
    //LEVEL_INFO( LEVEL4    , STR_TR1_LEVEL4    , TRACK_TR1_WIND      , 4 ),
    //LEVEL_INFO( LEVEL5    , STR_TR1_LEVEL5    , TRACK_TR1_WIND      , 3 ),
    //LEVEL_INFO( LEVEL6    , STR_TR1_LEVEL6    , TRACK_TR1_WIND      , 3 ),
    //LEVEL_INFO( LEVEL7A   , STR_TR1_LEVEL7A   , TRACK_TR1_CISTERN   , 3 ),
    //LEVEL_INFO( LEVEL7B   , STR_TR1_LEVEL7B   , TRACK_TR1_CISTERN   , 2 ),
    //LEVEL_INFO( CUT2      , STR_EMPTY         , TRACK_TR1_CUT_2     , 0 ),
    //LEVEL_INFO( LEVEL8A   , STR_TR1_LEVEL8A   , TRACK_TR1_WIND      , 3 ),
    //LEVEL_INFO( LEVEL8B   , STR_TR1_LEVEL8B   , TRACK_TR1_WIND      , 3 ),
    //LEVEL_INFO( LEVEL8C   , STR_TR1_LEVEL8C   , TRACK_TR1_WIND      , 1 ),
    //LEVEL_INFO( LEVEL10A  , STR_TR1_LEVEL10A  , TRACK_TR1_CISTERN   , 3 ),
    //LEVEL_INFO( CUT3      , STR_EMPTY         , TRACK_TR1_CUT_3     , 0 ),
    //LEVEL_INFO( LEVEL10B  , STR_TR1_LEVEL10B  , TRACK_TR1_PYRAMID   , 3 ),
    //LEVEL_INFO( CUT4      , STR_EMPTY         , TRACK_TR1_CUT_4     , 0 ),
    //LEVEL_INFO( LEVEL10C  , STR_TR1_LEVEL10C  , TRACK_TR1_PYRAMID   , 3 ),
    //LEVEL_INFO( EGYPT     , STR_TR1_EGYPT     , TRACK_TR1_WIND      , 3 ),
    //LEVEL_INFO( CAT       , STR_TR1_CAT       , TRACK_TR1_WIND      , 4 ),
    //LEVEL_INFO( END       , STR_TR1_END       , TRACK_TR1_WIND      , 2 )
};

#ifdef PROFILING
    uint32 gCounters[CNT_MAX];
#endif

int32 gRandSeedLogic;
int32 gRandSeedDraw;

#define X_RAND(seed) (((seed = 0x3039 + seed * 0x41C64E6D) >> 10) & 0x7FFF);

int32 rand_logic()
{
    return X_RAND(gRandSeedLogic);
}

int32 rand_draw()
{
    return X_RAND(gRandSeedDraw);
}

#ifdef USE_DIV_TABLE
EWRAM_DATA ALIGN16 divTableInt divTable[DIV_TABLE_SIZE] = { // must be at EWRAM start
    0x0000, 0x7FFF, 0x7FFF, 0x5555, 0x4000, 0x3333, 0x2AAA, 0x2492,
    0x2000, 0x1C71, 0x1999, 0x1745, 0x1555, 0x13B1, 0x1249, 0x1111,
    0x1000, 0x0F0F, 0x0E38, 0x0D79, 0x0CCC, 0x0C30, 0x0BA2, 0x0B21,
    0x0AAA, 0x0A3D, 0x09D8, 0x097B, 0x0924, 0x08D3, 0x0888, 0x0842,
    0x0800, 0x07C1, 0x0787, 0x0750, 0x071C, 0x06EB, 0x06BC, 0x0690,
    0x0666, 0x063E, 0x0618, 0x05F4, 0x05D1, 0x05B0, 0x0590, 0x0572,
    0x0555, 0x0539, 0x051E, 0x0505, 0x04EC, 0x04D4, 0x04BD, 0x04A7,
    0x0492, 0x047D, 0x0469, 0x0456, 0x0444, 0x0432, 0x0421, 0x0410,
    0x0400, 0x03F0, 0x03E0, 0x03D2, 0x03C3, 0x03B5, 0x03A8, 0x039B,
    0x038E, 0x0381, 0x0375, 0x0369, 0x035E, 0x0353, 0x0348, 0x033D,
    0x0333, 0x0329, 0x031F, 0x0315, 0x030C, 0x0303, 0x02FA, 0x02F1,
    0x02E8, 0x02E0, 0x02D8, 0x02D0, 0x02C8, 0x02C0, 0x02B9, 0x02B1,
    0x02AA, 0x02A3, 0x029C, 0x0295, 0x028F, 0x0288, 0x0282, 0x027C,
    0x0276, 0x0270, 0x026A, 0x0264, 0x025E, 0x0259, 0x0253, 0x024E,
    0x0249, 0x0243, 0x023E, 0x0239, 0x0234, 0x0230, 0x022B, 0x0226,
    0x0222, 0x021D, 0x0219, 0x0214, 0x0210, 0x020C, 0x0208, 0x0204,
    0x0200, 0x01FC, 0x01F8, 0x01F4, 0x01F0, 0x01EC, 0x01E9, 0x01E5,
    0x01E1, 0x01DE, 0x01DA, 0x01D7, 0x01D4, 0x01D0, 0x01CD, 0x01CA,
    0x01C7, 0x01C3, 0x01C0, 0x01BD, 0x01BA, 0x01B7, 0x01B4, 0x01B2,
    0x01AF, 0x01AC, 0x01A9, 0x01A6, 0x01A4, 0x01A1, 0x019E, 0x019C,
    0x0199, 0x0197, 0x0194, 0x0192, 0x018F, 0x018D, 0x018A, 0x0188,
    0x0186, 0x0183, 0x0181, 0x017F, 0x017D, 0x017A, 0x0178, 0x0176,
    0x0174, 0x0172, 0x0170, 0x016E, 0x016C, 0x016A, 0x0168, 0x0166,
    0x0164, 0x0162, 0x0160, 0x015E, 0x015C, 0x015A, 0x0158, 0x0157,
    0x0155, 0x0153, 0x0151, 0x0150, 0x014E, 0x014C, 0x014A, 0x0149,
    0x0147, 0x0146, 0x0144, 0x0142, 0x0141, 0x013F, 0x013E, 0x013C,
    0x013B, 0x0139, 0x0138, 0x0136, 0x0135, 0x0133, 0x0132, 0x0130,
    0x012F, 0x012E, 0x012C, 0x012B, 0x0129, 0x0128, 0x0127, 0x0125,
    0x0124, 0x0123, 0x0121, 0x0120, 0x011F, 0x011E, 0x011C, 0x011B,
    0x011A, 0x0119, 0x0118, 0x0116, 0x0115, 0x0114, 0x0113, 0x0112,
    0x0111, 0x010F, 0x010E, 0x010D, 0x010C, 0x010B, 0x010A, 0x0109,
    0x0108, 0x0107, 0x0106, 0x0105, 0x0104, 0x0103, 0x0102, 0x0101,
    0x0100, 0x00FF, 0x00FE, 0x00FD, 0x00FC, 0x00FB, 0x00FA, 0x00F9,
    0x00F8, 0x00F7, 0x00F6, 0x00F5, 0x00F4, 0x00F3, 0x00F2, 0x00F1,
    0x00F0, 0x00F0, 0x00EF, 0x00EE, 0x00ED, 0x00EC, 0x00EB, 0x00EA,
    0x00EA, 0x00E9, 0x00E8, 0x00E7, 0x00E6, 0x00E5, 0x00E5, 0x00E4,
    0x00E3, 0x00E2, 0x00E1, 0x00E1, 0x00E0, 0x00DF, 0x00DE, 0x00DE,
    0x00DD, 0x00DC, 0x00DB, 0x00DB, 0x00DA, 0x00D9, 0x00D9, 0x00D8,
    0x00D7, 0x00D6, 0x00D6, 0x00D5, 0x00D4, 0x00D4, 0x00D3, 0x00D2,
    0x00D2, 0x00D1, 0x00D0, 0x00D0, 0x00CF, 0x00CE, 0x00CE, 0x00CD,
    0x00CC, 0x00CC, 0x00CB, 0x00CA, 0x00CA, 0x00C9, 0x00C9, 0x00C8,
    0x00C7, 0x00C7, 0x00C6, 0x00C5, 0x00C5, 0x00C4, 0x00C4, 0x00C3,
    0x00C3, 0x00C2, 0x00C1, 0x00C1, 0x00C0, 0x00C0, 0x00BF, 0x00BF,
    0x00BE, 0x00BD, 0x00BD, 0x00BC, 0x00BC, 0x00BB, 0x00BB, 0x00BA,
    0x00BA, 0x00B9, 0x00B9, 0x00B8, 0x00B8, 0x00B7, 0x00B7, 0x00B6,
    0x00B6, 0x00B5, 0x00B5, 0x00B4, 0x00B4, 0x00B3, 0x00B3, 0x00B2,
    0x00B2, 0x00B1, 0x00B1, 0x00B0, 0x00B0, 0x00AF, 0x00AF, 0x00AE,
    0x00AE, 0x00AD, 0x00AD, 0x00AC, 0x00AC, 0x00AC, 0x00AB, 0x00AB,
    0x00AA, 0x00AA, 0x00A9, 0x00A9, 0x00A8, 0x00A8, 0x00A8, 0x00A7,
    0x00A7, 0x00A6, 0x00A6, 0x00A5, 0x00A5, 0x00A5, 0x00A4, 0x00A4,
    0x00A3, 0x00A3, 0x00A3, 0x00A2, 0x00A2, 0x00A1, 0x00A1, 0x00A1,
    0x00A0, 0x00A0, 0x009F, 0x009F, 0x009F, 0x009E, 0x009E, 0x009D,
    0x009D, 0x009D, 0x009C, 0x009C, 0x009C, 0x009B, 0x009B, 0x009A,
    0x009A, 0x009A, 0x0099, 0x0099, 0x0099, 0x0098, 0x0098, 0x0098,
    0x0097, 0x0097, 0x0097, 0x0096, 0x0096, 0x0095, 0x0095, 0x0095,
    0x0094, 0x0094, 0x0094, 0x0093, 0x0093, 0x0093, 0x0092, 0x0092,
    0x0092, 0x0091, 0x0091, 0x0091, 0x0090, 0x0090, 0x0090, 0x0090,
    0x008F, 0x008F, 0x008F, 0x008E, 0x008E, 0x008E, 0x008D, 0x008D,
    0x008D, 0x008C, 0x008C, 0x008C, 0x008C, 0x008B, 0x008B, 0x008B,
    0x008A, 0x008A, 0x008A, 0x0089, 0x0089, 0x0089, 0x0089, 0x0088,
    0x0088, 0x0088, 0x0087, 0x0087, 0x0087, 0x0087, 0x0086, 0x0086,
    0x0086, 0x0086, 0x0085, 0x0085, 0x0085, 0x0084, 0x0084, 0x0084,
    0x0084, 0x0083, 0x0083, 0x0083, 0x0083, 0x0082, 0x0082, 0x0082,
    0x0082, 0x0081, 0x0081, 0x0081, 0x0081, 0x0080, 0x0080, 0x0080,
    0x0080, 0x007F, 0x007F, 0x007F, 0x007F, 0x007E, 0x007E, 0x007E,
    0x007E, 0x007D, 0x007D, 0x007D, 0x007D, 0x007C, 0x007C, 0x007C,
    0x007C, 0x007B, 0x007B, 0x007B, 0x007B, 0x007A, 0x007A, 0x007A,
    0x007A, 0x007A, 0x0079, 0x0079, 0x0079, 0x0079, 0x0078, 0x0078,
    0x0078, 0x0078, 0x0078, 0x0077, 0x0077, 0x0077, 0x0077, 0x0076,
    0x0076, 0x0076, 0x0076, 0x0076, 0x0075, 0x0075, 0x0075, 0x0075,
    0x0075, 0x0074, 0x0074, 0x0074, 0x0074, 0x0073, 0x0073, 0x0073,
    0x0073, 0x0073, 0x0072, 0x0072, 0x0072, 0x0072, 0x0072, 0x0071,
    0x0071, 0x0071, 0x0071, 0x0071, 0x0070, 0x0070, 0x0070, 0x0070,
    0x0070, 0x0070, 0x006F, 0x006F, 0x006F, 0x006F, 0x006F, 0x006E,
    0x006E, 0x006E, 0x006E, 0x006E, 0x006D, 0x006D, 0x006D, 0x006D,
    0x006D, 0x006D, 0x006C, 0x006C, 0x006C, 0x006C, 0x006C, 0x006B,
    0x006B, 0x006B, 0x006B, 0x006B, 0x006B, 0x006A, 0x006A, 0x006A,
    0x006A, 0x006A, 0x006A, 0x0069, 0x0069, 0x0069, 0x0069, 0x0069,
    0x0069, 0x0068, 0x0068, 0x0068, 0x0068, 0x0068, 0x0068, 0x0067,
    0x0067, 0x0067, 0x0067, 0x0067, 0x0067, 0x0066, 0x0066, 0x0066,
    0x0066, 0x0066, 0x0066, 0x0065, 0x0065, 0x0065, 0x0065, 0x0065,
    0x0065, 0x0064, 0x0064, 0x0064, 0x0064, 0x0064, 0x0064, 0x0064,
    0x0063, 0x0063, 0x0063, 0x0063, 0x0063, 0x0063, 0x0062, 0x0062,
    0x0062, 0x0062, 0x0062, 0x0062, 0x0062, 0x0061, 0x0061, 0x0061,
    0x0061, 0x0061, 0x0061, 0x0061, 0x0060, 0x0060, 0x0060, 0x0060,
    0x0060, 0x0060, 0x0060, 0x005F, 0x005F, 0x005F, 0x005F, 0x005F,
    0x005F, 0x005F, 0x005E, 0x005E, 0x005E, 0x005E, 0x005E, 0x005E,
    0x005E, 0x005E, 0x005D, 0x005D, 0x005D, 0x005D, 0x005D, 0x005D,
    0x005D, 0x005C, 0x005C, 0x005C, 0x005C, 0x005C, 0x005C, 0x005C,
    0x005C, 0x005B, 0x005B, 0x005B, 0x005B, 0x005B, 0x005B, 0x005B,
    0x005B, 0x005A, 0x005A, 0x005A, 0x005A, 0x005A, 0x005A, 0x005A,
    0x005A, 0x0059, 0x0059, 0x0059, 0x0059, 0x0059, 0x0059, 0x0059,
    0x0059, 0x0058, 0x0058, 0x0058, 0x0058, 0x0058, 0x0058, 0x0058,
    0x0058, 0x0057, 0x0057, 0x0057, 0x0057, 0x0057, 0x0057, 0x0057,
    0x0057, 0x0057, 0x0056, 0x0056, 0x0056, 0x0056, 0x0056, 0x0056,
    0x0056, 0x0056, 0x0056, 0x0055, 0x0055, 0x0055, 0x0055, 0x0055,
    0x0055, 0x0055, 0x0055, 0x0055, 0x0054, 0x0054, 0x0054, 0x0054,
    0x0054, 0x0054, 0x0054, 0x0054, 0x0054, 0x0053, 0x0053, 0x0053,
    0x0053, 0x0053, 0x0053, 0x0053, 0x0053, 0x0053, 0x0052, 0x0052,
    0x0052, 0x0052, 0x0052, 0x0052, 0x0052, 0x0052, 0x0052, 0x0052,
    0x0051, 0x0051, 0x0051, 0x0051, 0x0051, 0x0051, 0x0051, 0x0051,
    0x0051, 0x0051, 0x0050, 0x0050, 0x0050, 0x0050, 0x0050, 0x0050,
    0x0050, 0x0050, 0x0050, 0x0050, 0x004F, 0x004F, 0x004F, 0x004F,
    0x004F, 0x004F, 0x004F, 0x004F, 0x004F, 0x004F, 0x004E, 0x004E,
    0x004E, 0x004E, 0x004E, 0x004E, 0x004E, 0x004E, 0x004E, 0x004E,
    0x004E, 0x004D, 0x004D, 0x004D, 0x004D, 0x004D, 0x004D, 0x004D,
    0x004D, 0x004D, 0x004D, 0x004D, 0x004C, 0x004C, 0x004C, 0x004C,
    0x004C, 0x004C, 0x004C, 0x004C, 0x004C, 0x004C, 0x004C, 0x004B,
    0x004B, 0x004B, 0x004B, 0x004B, 0x004B, 0x004B, 0x004B, 0x004B,
    0x004B, 0x004B, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A,
    0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x004A, 0x0049, 0x0049,
    0x0049, 0x0049, 0x0049, 0x0049, 0x0049, 0x0049, 0x0049, 0x0049,
    0x0049, 0x0049, 0x0048, 0x0048, 0x0048, 0x0048, 0x0048, 0x0048,
    0x0048, 0x0048, 0x0048, 0x0048, 0x0048, 0x0048, 0x0048, 0x0047,
    0x0047, 0x0047, 0x0047, 0x0047, 0x0047, 0x0047, 0x0047, 0x0047,
    0x0047, 0x0047, 0x0047, 0x0047, 0x0046, 0x0046, 0x0046, 0x0046,
    0x0046, 0x0046, 0x0046, 0x0046, 0x0046, 0x0046, 0x0046, 0x0046,
    0x0046, 0x0045, 0x0045, 0x0045, 0x0045, 0x0045, 0x0045, 0x0045,
    0x0045, 0x0045, 0x0045, 0x0045, 0x0045, 0x0045, 0x0044, 0x0044,
    0x0044, 0x0044, 0x0044, 0x0044, 0x0044, 0x0044, 0x0044, 0x0044,
    0x0044, 0x0044, 0x0044, 0x0044, 0x0043, 0x0043, 0x0043, 0x0043,
    0x0043, 0x0043, 0x0043, 0x0043, 0x0043, 0x0043, 0x0043, 0x0043,
    0x0043, 0x0043, 0x0043, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042,
    0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042, 0x0042,
    0x0042, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041,
    0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041, 0x0041,
    0x0041, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040,
    0x0040, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040, 0x0040
};
#endif

const uint32 gSinCosTable[4096] = { // ROM
    0x00004000, 0x00194000, 0x00324000, 0x004B4000, 0x00654000, 0x007E4000, 0x00973FFF, 0x00B03FFF,
    0x00C93FFF, 0x00E23FFE, 0x00FB3FFE, 0x01143FFE, 0x012E3FFD, 0x01473FFD, 0x01603FFC, 0x01793FFC,
    0x01923FFB, 0x01AB3FFA, 0x01C43FFA, 0x01DD3FF9, 0x01F73FF8, 0x02103FF7, 0x02293FF7, 0x02423FF6,
    0x025B3FF5, 0x02743FF4, 0x028D3FF3, 0x02A63FF2, 0x02C03FF1, 0x02D93FF0, 0x02F23FEF, 0x030B3FED,
    0x03243FEC, 0x033D3FEB, 0x03563FEA, 0x036F3FE8, 0x03883FE7, 0x03A13FE6, 0x03BB3FE4, 0x03D43FE3,
    0x03ED3FE1, 0x04063FE0, 0x041F3FDE, 0x04383FDC, 0x04513FDB, 0x046A3FD9, 0x04833FD7, 0x049C3FD5,
    0x04B53FD4, 0x04CE3FD2, 0x04E73FD0, 0x05003FCE, 0x051A3FCC, 0x05333FCA, 0x054C3FC8, 0x05653FC6,
    0x057E3FC4, 0x05973FC1, 0x05B03FBF, 0x05C93FBD, 0x05E23FBB, 0x05FB3FB8, 0x06143FB6, 0x062D3FB4,
    0x06463FB1, 0x065F3FAF, 0x06783FAC, 0x06913FAA, 0x06AA3FA7, 0x06C33FA4, 0x06DC3FA2, 0x06F53F9F,
    0x070E3F9C, 0x07273F99, 0x07403F97, 0x07593F94, 0x07723F91, 0x078B3F8E, 0x07A43F8B, 0x07BD3F88,
    0x07D63F85, 0x07EF3F82, 0x08073F7F, 0x08203F7B, 0x08393F78, 0x08523F75, 0x086B3F72, 0x08843F6E,
    0x089D3F6B, 0x08B63F68, 0x08CF3F64, 0x08E83F61, 0x09013F5D, 0x09193F5A, 0x09323F56, 0x094B3F52,
    0x09643F4F, 0x097D3F4B, 0x09963F47, 0x09AF3F43, 0x09C73F40, 0x09E03F3C, 0x09F93F38, 0x0A123F34,
    0x0A2B3F30, 0x0A443F2C, 0x0A5C3F28, 0x0A753F24, 0x0A8E3F20, 0x0AA73F1C, 0x0AC03F17, 0x0AD83F13,
    0x0AF13F0F, 0x0B0A3F0A, 0x0B233F06, 0x0B3B3F02, 0x0B543EFD, 0x0B6D3EF9, 0x0B853EF4, 0x0B9E3EF0,
    0x0BB73EEB, 0x0BD03EE7, 0x0BE83EE2, 0x0C013EDD, 0x0C1A3ED8, 0x0C323ED4, 0x0C4B3ECF, 0x0C643ECA,
    0x0C7C3EC5, 0x0C953EC0, 0x0CAE3EBB, 0x0CC63EB6, 0x0CDF3EB1, 0x0CF83EAC, 0x0D103EA7, 0x0D293EA2,
    0x0D413E9D, 0x0D5A3E98, 0x0D723E92, 0x0D8B3E8D, 0x0DA43E88, 0x0DBC3E82, 0x0DD53E7D, 0x0DED3E77,
    0x0E063E72, 0x0E1E3E6C, 0x0E373E67, 0x0E4F3E61, 0x0E683E5C, 0x0E803E56, 0x0E993E50, 0x0EB13E4A,
    0x0ECA3E45, 0x0EE23E3F, 0x0EFB3E39, 0x0F133E33, 0x0F2B3E2D, 0x0F443E27, 0x0F5C3E21, 0x0F753E1B,
    0x0F8D3E15, 0x0FA53E0F, 0x0FBE3E09, 0x0FD63E03, 0x0FEE3DFC, 0x10073DF6, 0x101F3DF0, 0x10373DE9,
    0x10503DE3, 0x10683DDD, 0x10803DD6, 0x10993DD0, 0x10B13DC9, 0x10C93DC2, 0x10E13DBC, 0x10FA3DB5,
    0x11123DAF, 0x112A3DA8, 0x11423DA1, 0x115A3D9A, 0x11733D93, 0x118B3D8D, 0x11A33D86, 0x11BB3D7F,
    0x11D33D78, 0x11EB3D71, 0x12043D6A, 0x121C3D63, 0x12343D5B, 0x124C3D54, 0x12643D4D, 0x127C3D46,
    0x12943D3F, 0x12AC3D37, 0x12C43D30, 0x12DC3D28, 0x12F43D21, 0x130C3D1A, 0x13243D12, 0x133C3D0B,
    0x13543D03, 0x136C3CFB, 0x13843CF4, 0x139C3CEC, 0x13B43CE4, 0x13CC3CDD, 0x13E43CD5, 0x13FB3CCD,
    0x14133CC5, 0x142B3CBD, 0x14433CB5, 0x145B3CAD, 0x14733CA5, 0x148B3C9D, 0x14A23C95, 0x14BA3C8D,
    0x14D23C85, 0x14EA3C7D, 0x15013C74, 0x15193C6C, 0x15313C64, 0x15493C5B, 0x15603C53, 0x15783C4B,
    0x15903C42, 0x15A73C3A, 0x15BF3C31, 0x15D73C29, 0x15EE3C20, 0x16063C17, 0x161D3C0F, 0x16353C06,
    0x164C3BFD, 0x16643BF5, 0x167C3BEC, 0x16933BE3, 0x16AB3BDA, 0x16C23BD1, 0x16DA3BC8, 0x16F13BBF,
    0x17093BB6, 0x17203BAD, 0x17373BA4, 0x174F3B9B, 0x17663B92, 0x177E3B88, 0x17953B7F, 0x17AC3B76,
    0x17C43B6D, 0x17DB3B63, 0x17F23B5A, 0x180A3B50, 0x18213B47, 0x18383B3E, 0x184F3B34, 0x18673B2A,
    0x187E3B21, 0x18953B17, 0x18AC3B0E, 0x18C33B04, 0x18DB3AFA, 0x18F23AF0, 0x19093AE6, 0x19203ADD,
    0x19373AD3, 0x194E3AC9, 0x19653ABF, 0x197C3AB5, 0x19933AAB, 0x19AA3AA1, 0x19C13A97, 0x19D83A8D,
    0x19EF3A82, 0x1A063A78, 0x1A1D3A6E, 0x1A343A64, 0x1A4B3A59, 0x1A623A4F, 0x1A793A45, 0x1A903A3A,
    0x1AA73A30, 0x1ABE3A25, 0x1AD43A1B, 0x1AEB3A10, 0x1B023A06, 0x1B1939FB, 0x1B3039F0, 0x1B4639E6,
    0x1B5D39DB, 0x1B7439D0, 0x1B8A39C5, 0x1BA139BB, 0x1BB839B0, 0x1BCE39A5, 0x1BE5399A, 0x1BFC398F,
    0x1C123984, 0x1C293979, 0x1C3F396E, 0x1C563963, 0x1C6C3958, 0x1C83394C, 0x1C993941, 0x1CB03936,
    0x1CC6392B, 0x1CDD391F, 0x1CF33914, 0x1D0A3909, 0x1D2038FD, 0x1D3638F2, 0x1D4D38E6, 0x1D6338DB,
    0x1D7938CF, 0x1D9038C3, 0x1DA638B8, 0x1DBC38AC, 0x1DD338A1, 0x1DE93895, 0x1DFF3889, 0x1E15387D,
    0x1E2B3871, 0x1E423866, 0x1E58385A, 0x1E6E384E, 0x1E843842, 0x1E9A3836, 0x1EB0382A, 0x1EC6381E,
    0x1EDC3812, 0x1EF23805, 0x1F0837F9, 0x1F1E37ED, 0x1F3437E1, 0x1F4A37D5, 0x1F6037C8, 0x1F7637BC,
    0x1F8C37B0, 0x1FA237A3, 0x1FB73797, 0x1FCD378A, 0x1FE3377E, 0x1FF93771, 0x200F3765, 0x20243758,
    0x203A374B, 0x2050373F, 0x20653732, 0x207B3725, 0x20913718, 0x20A6370C, 0x20BC36FF, 0x20D136F2,
    0x20E736E5, 0x20FD36D8, 0x211236CB, 0x212836BE, 0x213D36B1, 0x215336A4, 0x21683697, 0x217D368A,
    0x2193367D, 0x21A8366F, 0x21BE3662, 0x21D33655, 0x21E83648, 0x21FE363A, 0x2213362D, 0x22283620,
    0x223D3612, 0x22533605, 0x226835F7, 0x227D35EA, 0x229235DC, 0x22A735CE, 0x22BC35C1, 0x22D235B3,
    0x22E735A5, 0x22FC3598, 0x2311358A, 0x2326357C, 0x233B356E, 0x23503561, 0x23653553, 0x237A3545,
    0x238E3537, 0x23A33529, 0x23B8351B, 0x23CD350D, 0x23E234FF, 0x23F734F1, 0x240B34E2, 0x242034D4,
    0x243534C6, 0x244A34B8, 0x245E34AA, 0x2473349B, 0x2488348D, 0x249C347F, 0x24B13470, 0x24C53462,
    0x24DA3453, 0x24EF3445, 0x25033436, 0x25183428, 0x252C3419, 0x2541340B, 0x255533FC, 0x256933ED,
    0x257E33DF, 0x259233D0, 0x25A633C1, 0x25BB33B2, 0x25CF33A3, 0x25E33395, 0x25F83386, 0x260C3377,
    0x26203368, 0x26343359, 0x2648334A, 0x265C333B, 0x2671332C, 0x2685331D, 0x2699330D, 0x26AD32FE,
    0x26C132EF, 0x26D532E0, 0x26E932D0, 0x26FD32C1, 0x271132B2, 0x272432A3, 0x27383293, 0x274C3284,
    0x27603274, 0x27743265, 0x27883255, 0x279B3246, 0x27AF3236, 0x27C33227, 0x27D63217, 0x27EA3207,
    0x27FE31F8, 0x281131E8, 0x282531D8, 0x283831C8, 0x284C31B9, 0x286031A9, 0x28733199, 0x28863189,
    0x289A3179, 0x28AD3169, 0x28C13159, 0x28D43149, 0x28E73139, 0x28FB3129, 0x290E3119, 0x29213109,
    0x293530F9, 0x294830E8, 0x295B30D8, 0x296E30C8, 0x298130B8, 0x299430A7, 0x29A73097, 0x29BB3087,
    0x29CE3076, 0x29E13066, 0x29F43055, 0x2A073045, 0x2A1A3034, 0x2A2C3024, 0x2A3F3013, 0x2A523002,
    0x2A652FF2, 0x2A782FE1, 0x2A8B2FD0, 0x2A9D2FC0, 0x2AB02FAF, 0x2AC32F9E, 0x2AD62F8D, 0x2AE82F7D,
    0x2AFB2F6C, 0x2B0D2F5B, 0x2B202F4A, 0x2B332F39, 0x2B452F28, 0x2B582F17, 0x2B6A2F06, 0x2B7D2EF5,
    0x2B8F2EE4, 0x2BA12ED3, 0x2BB42EC2, 0x2BC62EB0, 0x2BD82E9F, 0x2BEB2E8E, 0x2BFD2E7D, 0x2C0F2E6B,
    0x2C212E5A, 0x2C342E49, 0x2C462E37, 0x2C582E26, 0x2C6A2E15, 0x2C7C2E03, 0x2C8E2DF2, 0x2CA02DE0,
    0x2CB22DCF, 0x2CC42DBD, 0x2CD62DAB, 0x2CE82D9A, 0x2CFA2D88, 0x2D0C2D76, 0x2D1E2D65, 0x2D2F2D53,
    0x2D412D41, 0x2D532D2F, 0x2D652D1E, 0x2D762D0C, 0x2D882CFA, 0x2D9A2CE8, 0x2DAB2CD6, 0x2DBD2CC4,
    0x2DCF2CB2, 0x2DE02CA0, 0x2DF22C8E, 0x2E032C7C, 0x2E152C6A, 0x2E262C58, 0x2E372C46, 0x2E492C34,
    0x2E5A2C21, 0x2E6B2C0F, 0x2E7D2BFD, 0x2E8E2BEB, 0x2E9F2BD8, 0x2EB02BC6, 0x2EC22BB4, 0x2ED32BA1,
    0x2EE42B8F, 0x2EF52B7D, 0x2F062B6A, 0x2F172B58, 0x2F282B45, 0x2F392B33, 0x2F4A2B20, 0x2F5B2B0D,
    0x2F6C2AFB, 0x2F7D2AE8, 0x2F8D2AD6, 0x2F9E2AC3, 0x2FAF2AB0, 0x2FC02A9D, 0x2FD02A8B, 0x2FE12A78,
    0x2FF22A65, 0x30022A52, 0x30132A3F, 0x30242A2C, 0x30342A1A, 0x30452A07, 0x305529F4, 0x306629E1,
    0x307629CE, 0x308729BB, 0x309729A7, 0x30A72994, 0x30B82981, 0x30C8296E, 0x30D8295B, 0x30E82948,
    0x30F92935, 0x31092921, 0x3119290E, 0x312928FB, 0x313928E7, 0x314928D4, 0x315928C1, 0x316928AD,
    0x3179289A, 0x31892886, 0x31992873, 0x31A92860, 0x31B9284C, 0x31C82838, 0x31D82825, 0x31E82811,
    0x31F827FE, 0x320727EA, 0x321727D6, 0x322727C3, 0x323627AF, 0x3246279B, 0x32552788, 0x32652774,
    0x32742760, 0x3284274C, 0x32932738, 0x32A32724, 0x32B22711, 0x32C126FD, 0x32D026E9, 0x32E026D5,
    0x32EF26C1, 0x32FE26AD, 0x330D2699, 0x331D2685, 0x332C2671, 0x333B265C, 0x334A2648, 0x33592634,
    0x33682620, 0x3377260C, 0x338625F8, 0x339525E3, 0x33A325CF, 0x33B225BB, 0x33C125A6, 0x33D02592,
    0x33DF257E, 0x33ED2569, 0x33FC2555, 0x340B2541, 0x3419252C, 0x34282518, 0x34362503, 0x344524EF,
    0x345324DA, 0x346224C5, 0x347024B1, 0x347F249C, 0x348D2488, 0x349B2473, 0x34AA245E, 0x34B8244A,
    0x34C62435, 0x34D42420, 0x34E2240B, 0x34F123F7, 0x34FF23E2, 0x350D23CD, 0x351B23B8, 0x352923A3,
    0x3537238E, 0x3545237A, 0x35532365, 0x35612350, 0x356E233B, 0x357C2326, 0x358A2311, 0x359822FC,
    0x35A522E7, 0x35B322D2, 0x35C122BC, 0x35CE22A7, 0x35DC2292, 0x35EA227D, 0x35F72268, 0x36052253,
    0x3612223D, 0x36202228, 0x362D2213, 0x363A21FE, 0x364821E8, 0x365521D3, 0x366221BE, 0x366F21A8,
    0x367D2193, 0x368A217D, 0x36972168, 0x36A42153, 0x36B1213D, 0x36BE2128, 0x36CB2112, 0x36D820FD,
    0x36E520E7, 0x36F220D1, 0x36FF20BC, 0x370C20A6, 0x37182091, 0x3725207B, 0x37322065, 0x373F2050,
    0x374B203A, 0x37582024, 0x3765200F, 0x37711FF9, 0x377E1FE3, 0x378A1FCD, 0x37971FB7, 0x37A31FA2,
    0x37B01F8C, 0x37BC1F76, 0x37C81F60, 0x37D51F4A, 0x37E11F34, 0x37ED1F1E, 0x37F91F08, 0x38051EF2,
    0x38121EDC, 0x381E1EC6, 0x382A1EB0, 0x38361E9A, 0x38421E84, 0x384E1E6E, 0x385A1E58, 0x38661E42,
    0x38711E2B, 0x387D1E15, 0x38891DFF, 0x38951DE9, 0x38A11DD3, 0x38AC1DBC, 0x38B81DA6, 0x38C31D90,
    0x38CF1D79, 0x38DB1D63, 0x38E61D4D, 0x38F21D36, 0x38FD1D20, 0x39091D0A, 0x39141CF3, 0x391F1CDD,
    0x392B1CC6, 0x39361CB0, 0x39411C99, 0x394C1C83, 0x39581C6C, 0x39631C56, 0x396E1C3F, 0x39791C29,
    0x39841C12, 0x398F1BFC, 0x399A1BE5, 0x39A51BCE, 0x39B01BB8, 0x39BB1BA1, 0x39C51B8A, 0x39D01B74,
    0x39DB1B5D, 0x39E61B46, 0x39F01B30, 0x39FB1B19, 0x3A061B02, 0x3A101AEB, 0x3A1B1AD4, 0x3A251ABE,
    0x3A301AA7, 0x3A3A1A90, 0x3A451A79, 0x3A4F1A62, 0x3A591A4B, 0x3A641A34, 0x3A6E1A1D, 0x3A781A06,
    0x3A8219EF, 0x3A8D19D8, 0x3A9719C1, 0x3AA119AA, 0x3AAB1993, 0x3AB5197C, 0x3ABF1965, 0x3AC9194E,
    0x3AD31937, 0x3ADD1920, 0x3AE61909, 0x3AF018F2, 0x3AFA18DB, 0x3B0418C3, 0x3B0E18AC, 0x3B171895,
    0x3B21187E, 0x3B2A1867, 0x3B34184F, 0x3B3E1838, 0x3B471821, 0x3B50180A, 0x3B5A17F2, 0x3B6317DB,
    0x3B6D17C4, 0x3B7617AC, 0x3B7F1795, 0x3B88177E, 0x3B921766, 0x3B9B174F, 0x3BA41737, 0x3BAD1720,
    0x3BB61709, 0x3BBF16F1, 0x3BC816DA, 0x3BD116C2, 0x3BDA16AB, 0x3BE31693, 0x3BEC167C, 0x3BF51664,
    0x3BFD164C, 0x3C061635, 0x3C0F161D, 0x3C171606, 0x3C2015EE, 0x3C2915D7, 0x3C3115BF, 0x3C3A15A7,
    0x3C421590, 0x3C4B1578, 0x3C531560, 0x3C5B1549, 0x3C641531, 0x3C6C1519, 0x3C741501, 0x3C7D14EA,
    0x3C8514D2, 0x3C8D14BA, 0x3C9514A2, 0x3C9D148B, 0x3CA51473, 0x3CAD145B, 0x3CB51443, 0x3CBD142B,
    0x3CC51413, 0x3CCD13FB, 0x3CD513E4, 0x3CDD13CC, 0x3CE413B4, 0x3CEC139C, 0x3CF41384, 0x3CFB136C,
    0x3D031354, 0x3D0B133C, 0x3D121324, 0x3D1A130C, 0x3D2112F4, 0x3D2812DC, 0x3D3012C4, 0x3D3712AC,
    0x3D3F1294, 0x3D46127C, 0x3D4D1264, 0x3D54124C, 0x3D5B1234, 0x3D63121C, 0x3D6A1204, 0x3D7111EB,
    0x3D7811D3, 0x3D7F11BB, 0x3D8611A3, 0x3D8D118B, 0x3D931173, 0x3D9A115A, 0x3DA11142, 0x3DA8112A,
    0x3DAF1112, 0x3DB510FA, 0x3DBC10E1, 0x3DC210C9, 0x3DC910B1, 0x3DD01099, 0x3DD61080, 0x3DDD1068,
    0x3DE31050, 0x3DE91037, 0x3DF0101F, 0x3DF61007, 0x3DFC0FEE, 0x3E030FD6, 0x3E090FBE, 0x3E0F0FA5,
    0x3E150F8D, 0x3E1B0F75, 0x3E210F5C, 0x3E270F44, 0x3E2D0F2B, 0x3E330F13, 0x3E390EFB, 0x3E3F0EE2,
    0x3E450ECA, 0x3E4A0EB1, 0x3E500E99, 0x3E560E80, 0x3E5C0E68, 0x3E610E4F, 0x3E670E37, 0x3E6C0E1E,
    0x3E720E06, 0x3E770DED, 0x3E7D0DD5, 0x3E820DBC, 0x3E880DA4, 0x3E8D0D8B, 0x3E920D72, 0x3E980D5A,
    0x3E9D0D41, 0x3EA20D29, 0x3EA70D10, 0x3EAC0CF8, 0x3EB10CDF, 0x3EB60CC6, 0x3EBB0CAE, 0x3EC00C95,
    0x3EC50C7C, 0x3ECA0C64, 0x3ECF0C4B, 0x3ED40C32, 0x3ED80C1A, 0x3EDD0C01, 0x3EE20BE8, 0x3EE70BD0,
    0x3EEB0BB7, 0x3EF00B9E, 0x3EF40B85, 0x3EF90B6D, 0x3EFD0B54, 0x3F020B3B, 0x3F060B23, 0x3F0A0B0A,
    0x3F0F0AF1, 0x3F130AD8, 0x3F170AC0, 0x3F1C0AA7, 0x3F200A8E, 0x3F240A75, 0x3F280A5C, 0x3F2C0A44,
    0x3F300A2B, 0x3F340A12, 0x3F3809F9, 0x3F3C09E0, 0x3F4009C7, 0x3F4309AF, 0x3F470996, 0x3F4B097D,
    0x3F4F0964, 0x3F52094B, 0x3F560932, 0x3F5A0919, 0x3F5D0901, 0x3F6108E8, 0x3F6408CF, 0x3F6808B6,
    0x3F6B089D, 0x3F6E0884, 0x3F72086B, 0x3F750852, 0x3F780839, 0x3F7B0820, 0x3F7F0807, 0x3F8207EF,
    0x3F8507D6, 0x3F8807BD, 0x3F8B07A4, 0x3F8E078B, 0x3F910772, 0x3F940759, 0x3F970740, 0x3F990727,
    0x3F9C070E, 0x3F9F06F5, 0x3FA206DC, 0x3FA406C3, 0x3FA706AA, 0x3FAA0691, 0x3FAC0678, 0x3FAF065F,
    0x3FB10646, 0x3FB4062D, 0x3FB60614, 0x3FB805FB, 0x3FBB05E2, 0x3FBD05C9, 0x3FBF05B0, 0x3FC10597,
    0x3FC4057E, 0x3FC60565, 0x3FC8054C, 0x3FCA0533, 0x3FCC051A, 0x3FCE0500, 0x3FD004E7, 0x3FD204CE,
    0x3FD404B5, 0x3FD5049C, 0x3FD70483, 0x3FD9046A, 0x3FDB0451, 0x3FDC0438, 0x3FDE041F, 0x3FE00406,
    0x3FE103ED, 0x3FE303D4, 0x3FE403BB, 0x3FE603A1, 0x3FE70388, 0x3FE8036F, 0x3FEA0356, 0x3FEB033D,
    0x3FEC0324, 0x3FED030B, 0x3FEF02F2, 0x3FF002D9, 0x3FF102C0, 0x3FF202A6, 0x3FF3028D, 0x3FF40274,
    0x3FF5025B, 0x3FF60242, 0x3FF70229, 0x3FF70210, 0x3FF801F7, 0x3FF901DD, 0x3FFA01C4, 0x3FFA01AB,
    0x3FFB0192, 0x3FFC0179, 0x3FFC0160, 0x3FFD0147, 0x3FFD012E, 0x3FFE0114, 0x3FFE00FB, 0x3FFE00E2,
    0x3FFF00C9, 0x3FFF00B0, 0x3FFF0097, 0x4000007E, 0x40000065, 0x4000004B, 0x40000032, 0x40000019,
    0x40000000, 0x4000FFE7, 0x4000FFCE, 0x4000FFB5, 0x4000FF9B, 0x4000FF82, 0x3FFFFF69, 0x3FFFFF50,
    0x3FFFFF37, 0x3FFEFF1E, 0x3FFEFF05, 0x3FFEFEEC, 0x3FFDFED2, 0x3FFDFEB9, 0x3FFCFEA0, 0x3FFCFE87,
    0x3FFBFE6E, 0x3FFAFE55, 0x3FFAFE3C, 0x3FF9FE23, 0x3FF8FE09, 0x3FF7FDF0, 0x3FF7FDD7, 0x3FF6FDBE,
    0x3FF5FDA5, 0x3FF4FD8C, 0x3FF3FD73, 0x3FF2FD5A, 0x3FF1FD40, 0x3FF0FD27, 0x3FEFFD0E, 0x3FEDFCF5,
    0x3FECFCDC, 0x3FEBFCC3, 0x3FEAFCAA, 0x3FE8FC91, 0x3FE7FC78, 0x3FE6FC5F, 0x3FE4FC45, 0x3FE3FC2C,
    0x3FE1FC13, 0x3FE0FBFA, 0x3FDEFBE1, 0x3FDCFBC8, 0x3FDBFBAF, 0x3FD9FB96, 0x3FD7FB7D, 0x3FD5FB64,
    0x3FD4FB4B, 0x3FD2FB32, 0x3FD0FB19, 0x3FCEFB00, 0x3FCCFAE6, 0x3FCAFACD, 0x3FC8FAB4, 0x3FC6FA9B,
    0x3FC4FA82, 0x3FC1FA69, 0x3FBFFA50, 0x3FBDFA37, 0x3FBBFA1E, 0x3FB8FA05, 0x3FB6F9EC, 0x3FB4F9D3,
    0x3FB1F9BA, 0x3FAFF9A1, 0x3FACF988, 0x3FAAF96F, 0x3FA7F956, 0x3FA4F93D, 0x3FA2F924, 0x3F9FF90B,
    0x3F9CF8F2, 0x3F99F8D9, 0x3F97F8C0, 0x3F94F8A7, 0x3F91F88E, 0x3F8EF875, 0x3F8BF85C, 0x3F88F843,
    0x3F85F82A, 0x3F82F811, 0x3F7FF7F9, 0x3F7BF7E0, 0x3F78F7C7, 0x3F75F7AE, 0x3F72F795, 0x3F6EF77C,
    0x3F6BF763, 0x3F68F74A, 0x3F64F731, 0x3F61F718, 0x3F5DF6FF, 0x3F5AF6E7, 0x3F56F6CE, 0x3F52F6B5,
    0x3F4FF69C, 0x3F4BF683, 0x3F47F66A, 0x3F43F651, 0x3F40F639, 0x3F3CF620, 0x3F38F607, 0x3F34F5EE,
    0x3F30F5D5, 0x3F2CF5BC, 0x3F28F5A4, 0x3F24F58B, 0x3F20F572, 0x3F1CF559, 0x3F17F540, 0x3F13F528,
    0x3F0FF50F, 0x3F0AF4F6, 0x3F06F4DD, 0x3F02F4C5, 0x3EFDF4AC, 0x3EF9F493, 0x3EF4F47B, 0x3EF0F462,
    0x3EEBF449, 0x3EE7F430, 0x3EE2F418, 0x3EDDF3FF, 0x3ED8F3E6, 0x3ED4F3CE, 0x3ECFF3B5, 0x3ECAF39C,
    0x3EC5F384, 0x3EC0F36B, 0x3EBBF352, 0x3EB6F33A, 0x3EB1F321, 0x3EACF308, 0x3EA7F2F0, 0x3EA2F2D7,
    0x3E9DF2BF, 0x3E98F2A6, 0x3E92F28E, 0x3E8DF275, 0x3E88F25C, 0x3E82F244, 0x3E7DF22B, 0x3E77F213,
    0x3E72F1FA, 0x3E6CF1E2, 0x3E67F1C9, 0x3E61F1B1, 0x3E5CF198, 0x3E56F180, 0x3E50F167, 0x3E4AF14F,
    0x3E45F136, 0x3E3FF11E, 0x3E39F105, 0x3E33F0ED, 0x3E2DF0D5, 0x3E27F0BC, 0x3E21F0A4, 0x3E1BF08B,
    0x3E15F073, 0x3E0FF05B, 0x3E09F042, 0x3E03F02A, 0x3DFCF012, 0x3DF6EFF9, 0x3DF0EFE1, 0x3DE9EFC9,
    0x3DE3EFB0, 0x3DDDEF98, 0x3DD6EF80, 0x3DD0EF67, 0x3DC9EF4F, 0x3DC2EF37, 0x3DBCEF1F, 0x3DB5EF06,
    0x3DAFEEEE, 0x3DA8EED6, 0x3DA1EEBE, 0x3D9AEEA6, 0x3D93EE8D, 0x3D8DEE75, 0x3D86EE5D, 0x3D7FEE45,
    0x3D78EE2D, 0x3D71EE15, 0x3D6AEDFC, 0x3D63EDE4, 0x3D5BEDCC, 0x3D54EDB4, 0x3D4DED9C, 0x3D46ED84,
    0x3D3FED6C, 0x3D37ED54, 0x3D30ED3C, 0x3D28ED24, 0x3D21ED0C, 0x3D1AECF4, 0x3D12ECDC, 0x3D0BECC4,
    0x3D03ECAC, 0x3CFBEC94, 0x3CF4EC7C, 0x3CECEC64, 0x3CE4EC4C, 0x3CDDEC34, 0x3CD5EC1C, 0x3CCDEC05,
    0x3CC5EBED, 0x3CBDEBD5, 0x3CB5EBBD, 0x3CADEBA5, 0x3CA5EB8D, 0x3C9DEB75, 0x3C95EB5E, 0x3C8DEB46,
    0x3C85EB2E, 0x3C7DEB16, 0x3C74EAFF, 0x3C6CEAE7, 0x3C64EACF, 0x3C5BEAB7, 0x3C53EAA0, 0x3C4BEA88,
    0x3C42EA70, 0x3C3AEA59, 0x3C31EA41, 0x3C29EA29, 0x3C20EA12, 0x3C17E9FA, 0x3C0FE9E3, 0x3C06E9CB,
    0x3BFDE9B4, 0x3BF5E99C, 0x3BECE984, 0x3BE3E96D, 0x3BDAE955, 0x3BD1E93E, 0x3BC8E926, 0x3BBFE90F,
    0x3BB6E8F7, 0x3BADE8E0, 0x3BA4E8C9, 0x3B9BE8B1, 0x3B92E89A, 0x3B88E882, 0x3B7FE86B, 0x3B76E854,
    0x3B6DE83C, 0x3B63E825, 0x3B5AE80E, 0x3B50E7F6, 0x3B47E7DF, 0x3B3EE7C8, 0x3B34E7B1, 0x3B2AE799,
    0x3B21E782, 0x3B17E76B, 0x3B0EE754, 0x3B04E73D, 0x3AFAE725, 0x3AF0E70E, 0x3AE6E6F7, 0x3ADDE6E0,
    0x3AD3E6C9, 0x3AC9E6B2, 0x3ABFE69B, 0x3AB5E684, 0x3AABE66D, 0x3AA1E656, 0x3A97E63F, 0x3A8DE628,
    0x3A82E611, 0x3A78E5FA, 0x3A6EE5E3, 0x3A64E5CC, 0x3A59E5B5, 0x3A4FE59E, 0x3A45E587, 0x3A3AE570,
    0x3A30E559, 0x3A25E542, 0x3A1BE52C, 0x3A10E515, 0x3A06E4FE, 0x39FBE4E7, 0x39F0E4D0, 0x39E6E4BA,
    0x39DBE4A3, 0x39D0E48C, 0x39C5E476, 0x39BBE45F, 0x39B0E448, 0x39A5E432, 0x399AE41B, 0x398FE404,
    0x3984E3EE, 0x3979E3D7, 0x396EE3C1, 0x3963E3AA, 0x3958E394, 0x394CE37D, 0x3941E367, 0x3936E350,
    0x392BE33A, 0x391FE323, 0x3914E30D, 0x3909E2F6, 0x38FDE2E0, 0x38F2E2CA, 0x38E6E2B3, 0x38DBE29D,
    0x38CFE287, 0x38C3E270, 0x38B8E25A, 0x38ACE244, 0x38A1E22D, 0x3895E217, 0x3889E201, 0x387DE1EB,
    0x3871E1D5, 0x3866E1BE, 0x385AE1A8, 0x384EE192, 0x3842E17C, 0x3836E166, 0x382AE150, 0x381EE13A,
    0x3812E124, 0x3805E10E, 0x37F9E0F8, 0x37EDE0E2, 0x37E1E0CC, 0x37D5E0B6, 0x37C8E0A0, 0x37BCE08A,
    0x37B0E074, 0x37A3E05E, 0x3797E049, 0x378AE033, 0x377EE01D, 0x3771E007, 0x3765DFF1, 0x3758DFDC,
    0x374BDFC6, 0x373FDFB0, 0x3732DF9B, 0x3725DF85, 0x3718DF6F, 0x370CDF5A, 0x36FFDF44, 0x36F2DF2F,
    0x36E5DF19, 0x36D8DF03, 0x36CBDEEE, 0x36BEDED8, 0x36B1DEC3, 0x36A4DEAD, 0x3697DE98, 0x368ADE83,
    0x367DDE6D, 0x366FDE58, 0x3662DE42, 0x3655DE2D, 0x3648DE18, 0x363ADE02, 0x362DDDED, 0x3620DDD8,
    0x3612DDC3, 0x3605DDAD, 0x35F7DD98, 0x35EADD83, 0x35DCDD6E, 0x35CEDD59, 0x35C1DD44, 0x35B3DD2E,
    0x35A5DD19, 0x3598DD04, 0x358ADCEF, 0x357CDCDA, 0x356EDCC5, 0x3561DCB0, 0x3553DC9B, 0x3545DC86,
    0x3537DC72, 0x3529DC5D, 0x351BDC48, 0x350DDC33, 0x34FFDC1E, 0x34F1DC09, 0x34E2DBF5, 0x34D4DBE0,
    0x34C6DBCB, 0x34B8DBB6, 0x34AADBA2, 0x349BDB8D, 0x348DDB78, 0x347FDB64, 0x3470DB4F, 0x3462DB3B,
    0x3453DB26, 0x3445DB11, 0x3436DAFD, 0x3428DAE8, 0x3419DAD4, 0x340BDABF, 0x33FCDAAB, 0x33EDDA97,
    0x33DFDA82, 0x33D0DA6E, 0x33C1DA5A, 0x33B2DA45, 0x33A3DA31, 0x3395DA1D, 0x3386DA08, 0x3377D9F4,
    0x3368D9E0, 0x3359D9CC, 0x334AD9B8, 0x333BD9A4, 0x332CD98F, 0x331DD97B, 0x330DD967, 0x32FED953,
    0x32EFD93F, 0x32E0D92B, 0x32D0D917, 0x32C1D903, 0x32B2D8EF, 0x32A3D8DC, 0x3293D8C8, 0x3284D8B4,
    0x3274D8A0, 0x3265D88C, 0x3255D878, 0x3246D865, 0x3236D851, 0x3227D83D, 0x3217D82A, 0x3207D816,
    0x31F8D802, 0x31E8D7EF, 0x31D8D7DB, 0x31C8D7C8, 0x31B9D7B4, 0x31A9D7A0, 0x3199D78D, 0x3189D77A,
    0x3179D766, 0x3169D753, 0x3159D73F, 0x3149D72C, 0x3139D719, 0x3129D705, 0x3119D6F2, 0x3109D6DF,
    0x30F9D6CB, 0x30E8D6B8, 0x30D8D6A5, 0x30C8D692, 0x30B8D67F, 0x30A7D66C, 0x3097D659, 0x3087D645,
    0x3076D632, 0x3066D61F, 0x3055D60C, 0x3045D5F9, 0x3034D5E6, 0x3024D5D4, 0x3013D5C1, 0x3002D5AE,
    0x2FF2D59B, 0x2FE1D588, 0x2FD0D575, 0x2FC0D563, 0x2FAFD550, 0x2F9ED53D, 0x2F8DD52A, 0x2F7DD518,
    0x2F6CD505, 0x2F5BD4F3, 0x2F4AD4E0, 0x2F39D4CD, 0x2F28D4BB, 0x2F17D4A8, 0x2F06D496, 0x2EF5D483,
    0x2EE4D471, 0x2ED3D45F, 0x2EC2D44C, 0x2EB0D43A, 0x2E9FD428, 0x2E8ED415, 0x2E7DD403, 0x2E6BD3F1,
    0x2E5AD3DF, 0x2E49D3CC, 0x2E37D3BA, 0x2E26D3A8, 0x2E15D396, 0x2E03D384, 0x2DF2D372, 0x2DE0D360,
    0x2DCFD34E, 0x2DBDD33C, 0x2DABD32A, 0x2D9AD318, 0x2D88D306, 0x2D76D2F4, 0x2D65D2E2, 0x2D53D2D1,
    0x2D41D2BF, 0x2D2FD2AD, 0x2D1ED29B, 0x2D0CD28A, 0x2CFAD278, 0x2CE8D266, 0x2CD6D255, 0x2CC4D243,
    0x2CB2D231, 0x2CA0D220, 0x2C8ED20E, 0x2C7CD1FD, 0x2C6AD1EB, 0x2C58D1DA, 0x2C46D1C9, 0x2C34D1B7,
    0x2C21D1A6, 0x2C0FD195, 0x2BFDD183, 0x2BEBD172, 0x2BD8D161, 0x2BC6D150, 0x2BB4D13E, 0x2BA1D12D,
    0x2B8FD11C, 0x2B7DD10B, 0x2B6AD0FA, 0x2B58D0E9, 0x2B45D0D8, 0x2B33D0C7, 0x2B20D0B6, 0x2B0DD0A5,
    0x2AFBD094, 0x2AE8D083, 0x2AD6D073, 0x2AC3D062, 0x2AB0D051, 0x2A9DD040, 0x2A8BD030, 0x2A78D01F,
    0x2A65D00E, 0x2A52CFFE, 0x2A3FCFED, 0x2A2CCFDC, 0x2A1ACFCC, 0x2A07CFBB, 0x29F4CFAB, 0x29E1CF9A,
    0x29CECF8A, 0x29BBCF79, 0x29A7CF69, 0x2994CF59, 0x2981CF48, 0x296ECF38, 0x295BCF28, 0x2948CF18,
    0x2935CF07, 0x2921CEF7, 0x290ECEE7, 0x28FBCED7, 0x28E7CEC7, 0x28D4CEB7, 0x28C1CEA7, 0x28ADCE97,
    0x289ACE87, 0x2886CE77, 0x2873CE67, 0x2860CE57, 0x284CCE47, 0x2838CE38, 0x2825CE28, 0x2811CE18,
    0x27FECE08, 0x27EACDF9, 0x27D6CDE9, 0x27C3CDD9, 0x27AFCDCA, 0x279BCDBA, 0x2788CDAB, 0x2774CD9B,
    0x2760CD8C, 0x274CCD7C, 0x2738CD6D, 0x2724CD5D, 0x2711CD4E, 0x26FDCD3F, 0x26E9CD30, 0x26D5CD20,
    0x26C1CD11, 0x26ADCD02, 0x2699CCF3, 0x2685CCE3, 0x2671CCD4, 0x265CCCC5, 0x2648CCB6, 0x2634CCA7,
    0x2620CC98, 0x260CCC89, 0x25F8CC7A, 0x25E3CC6B, 0x25CFCC5D, 0x25BBCC4E, 0x25A6CC3F, 0x2592CC30,
    0x257ECC21, 0x2569CC13, 0x2555CC04, 0x2541CBF5, 0x252CCBE7, 0x2518CBD8, 0x2503CBCA, 0x24EFCBBB,
    0x24DACBAD, 0x24C5CB9E, 0x24B1CB90, 0x249CCB81, 0x2488CB73, 0x2473CB65, 0x245ECB56, 0x244ACB48,
    0x2435CB3A, 0x2420CB2C, 0x240BCB1E, 0x23F7CB0F, 0x23E2CB01, 0x23CDCAF3, 0x23B8CAE5, 0x23A3CAD7,
    0x238ECAC9, 0x237ACABB, 0x2365CAAD, 0x2350CA9F, 0x233BCA92, 0x2326CA84, 0x2311CA76, 0x22FCCA68,
    0x22E7CA5B, 0x22D2CA4D, 0x22BCCA3F, 0x22A7CA32, 0x2292CA24, 0x227DCA16, 0x2268CA09, 0x2253C9FB,
    0x223DC9EE, 0x2228C9E0, 0x2213C9D3, 0x21FEC9C6, 0x21E8C9B8, 0x21D3C9AB, 0x21BEC99E, 0x21A8C991,
    0x2193C983, 0x217DC976, 0x2168C969, 0x2153C95C, 0x213DC94F, 0x2128C942, 0x2112C935, 0x20FDC928,
    0x20E7C91B, 0x20D1C90E, 0x20BCC901, 0x20A6C8F4, 0x2091C8E8, 0x207BC8DB, 0x2065C8CE, 0x2050C8C1,
    0x203AC8B5, 0x2024C8A8, 0x200FC89B, 0x1FF9C88F, 0x1FE3C882, 0x1FCDC876, 0x1FB7C869, 0x1FA2C85D,
    0x1F8CC850, 0x1F76C844, 0x1F60C838, 0x1F4AC82B, 0x1F34C81F, 0x1F1EC813, 0x1F08C807, 0x1EF2C7FB,
    0x1EDCC7EE, 0x1EC6C7E2, 0x1EB0C7D6, 0x1E9AC7CA, 0x1E84C7BE, 0x1E6EC7B2, 0x1E58C7A6, 0x1E42C79A,
    0x1E2BC78F, 0x1E15C783, 0x1DFFC777, 0x1DE9C76B, 0x1DD3C75F, 0x1DBCC754, 0x1DA6C748, 0x1D90C73D,
    0x1D79C731, 0x1D63C725, 0x1D4DC71A, 0x1D36C70E, 0x1D20C703, 0x1D0AC6F7, 0x1CF3C6EC, 0x1CDDC6E1,
    0x1CC6C6D5, 0x1CB0C6CA, 0x1C99C6BF, 0x1C83C6B4, 0x1C6CC6A8, 0x1C56C69D, 0x1C3FC692, 0x1C29C687,
    0x1C12C67C, 0x1BFCC671, 0x1BE5C666, 0x1BCEC65B, 0x1BB8C650, 0x1BA1C645, 0x1B8AC63B, 0x1B74C630,
    0x1B5DC625, 0x1B46C61A, 0x1B30C610, 0x1B19C605, 0x1B02C5FA, 0x1AEBC5F0, 0x1AD4C5E5, 0x1ABEC5DB,
    0x1AA7C5D0, 0x1A90C5C6, 0x1A79C5BB, 0x1A62C5B1, 0x1A4BC5A7, 0x1A34C59C, 0x1A1DC592, 0x1A06C588,
    0x19EFC57E, 0x19D8C573, 0x19C1C569, 0x19AAC55F, 0x1993C555, 0x197CC54B, 0x1965C541, 0x194EC537,
    0x1937C52D, 0x1920C523, 0x1909C51A, 0x18F2C510, 0x18DBC506, 0x18C3C4FC, 0x18ACC4F2, 0x1895C4E9,
    0x187EC4DF, 0x1867C4D6, 0x184FC4CC, 0x1838C4C2, 0x1821C4B9, 0x180AC4B0, 0x17F2C4A6, 0x17DBC49D,
    0x17C4C493, 0x17ACC48A, 0x1795C481, 0x177EC478, 0x1766C46E, 0x174FC465, 0x1737C45C, 0x1720C453,
    0x1709C44A, 0x16F1C441, 0x16DAC438, 0x16C2C42F, 0x16ABC426, 0x1693C41D, 0x167CC414, 0x1664C40B,
    0x164CC403, 0x1635C3FA, 0x161DC3F1, 0x1606C3E9, 0x15EEC3E0, 0x15D7C3D7, 0x15BFC3CF, 0x15A7C3C6,
    0x1590C3BE, 0x1578C3B5, 0x1560C3AD, 0x1549C3A5, 0x1531C39C, 0x1519C394, 0x1501C38C, 0x14EAC383,
    0x14D2C37B, 0x14BAC373, 0x14A2C36B, 0x148BC363, 0x1473C35B, 0x145BC353, 0x1443C34B, 0x142BC343,
    0x1413C33B, 0x13FBC333, 0x13E4C32B, 0x13CCC323, 0x13B4C31C, 0x139CC314, 0x1384C30C, 0x136CC305,
    0x1354C2FD, 0x133CC2F5, 0x1324C2EE, 0x130CC2E6, 0x12F4C2DF, 0x12DCC2D8, 0x12C4C2D0, 0x12ACC2C9,
    0x1294C2C1, 0x127CC2BA, 0x1264C2B3, 0x124CC2AC, 0x1234C2A5, 0x121CC29D, 0x1204C296, 0x11EBC28F,
    0x11D3C288, 0x11BBC281, 0x11A3C27A, 0x118BC273, 0x1173C26D, 0x115AC266, 0x1142C25F, 0x112AC258,
    0x1112C251, 0x10FAC24B, 0x10E1C244, 0x10C9C23E, 0x10B1C237, 0x1099C230, 0x1080C22A, 0x1068C223,
    0x1050C21D, 0x1037C217, 0x101FC210, 0x1007C20A, 0x0FEEC204, 0x0FD6C1FD, 0x0FBEC1F7, 0x0FA5C1F1,
    0x0F8DC1EB, 0x0F75C1E5, 0x0F5CC1DF, 0x0F44C1D9, 0x0F2BC1D3, 0x0F13C1CD, 0x0EFBC1C7, 0x0EE2C1C1,
    0x0ECAC1BB, 0x0EB1C1B6, 0x0E99C1B0, 0x0E80C1AA, 0x0E68C1A4, 0x0E4FC19F, 0x0E37C199, 0x0E1EC194,
    0x0E06C18E, 0x0DEDC189, 0x0DD5C183, 0x0DBCC17E, 0x0DA4C178, 0x0D8BC173, 0x0D72C16E, 0x0D5AC168,
    0x0D41C163, 0x0D29C15E, 0x0D10C159, 0x0CF8C154, 0x0CDFC14F, 0x0CC6C14A, 0x0CAEC145, 0x0C95C140,
    0x0C7CC13B, 0x0C64C136, 0x0C4BC131, 0x0C32C12C, 0x0C1AC128, 0x0C01C123, 0x0BE8C11E, 0x0BD0C119,
    0x0BB7C115, 0x0B9EC110, 0x0B85C10C, 0x0B6DC107, 0x0B54C103, 0x0B3BC0FE, 0x0B23C0FA, 0x0B0AC0F6,
    0x0AF1C0F1, 0x0AD8C0ED, 0x0AC0C0E9, 0x0AA7C0E4, 0x0A8EC0E0, 0x0A75C0DC, 0x0A5CC0D8, 0x0A44C0D4,
    0x0A2BC0D0, 0x0A12C0CC, 0x09F9C0C8, 0x09E0C0C4, 0x09C7C0C0, 0x09AFC0BD, 0x0996C0B9, 0x097DC0B5,
    0x0964C0B1, 0x094BC0AE, 0x0932C0AA, 0x0919C0A6, 0x0901C0A3, 0x08E8C09F, 0x08CFC09C, 0x08B6C098,
    0x089DC095, 0x0884C092, 0x086BC08E, 0x0852C08B, 0x0839C088, 0x0820C085, 0x0807C081, 0x07EFC07E,
    0x07D6C07B, 0x07BDC078, 0x07A4C075, 0x078BC072, 0x0772C06F, 0x0759C06C, 0x0740C069, 0x0727C067,
    0x070EC064, 0x06F5C061, 0x06DCC05E, 0x06C3C05C, 0x06AAC059, 0x0691C056, 0x0678C054, 0x065FC051,
    0x0646C04F, 0x062DC04C, 0x0614C04A, 0x05FBC048, 0x05E2C045, 0x05C9C043, 0x05B0C041, 0x0597C03F,
    0x057EC03C, 0x0565C03A, 0x054CC038, 0x0533C036, 0x051AC034, 0x0500C032, 0x04E7C030, 0x04CEC02E,
    0x04B5C02C, 0x049CC02B, 0x0483C029, 0x046AC027, 0x0451C025, 0x0438C024, 0x041FC022, 0x0406C020,
    0x03EDC01F, 0x03D4C01D, 0x03BBC01C, 0x03A1C01A, 0x0388C019, 0x036FC018, 0x0356C016, 0x033DC015,
    0x0324C014, 0x030BC013, 0x02F2C011, 0x02D9C010, 0x02C0C00F, 0x02A6C00E, 0x028DC00D, 0x0274C00C,
    0x025BC00B, 0x0242C00A, 0x0229C009, 0x0210C009, 0x01F7C008, 0x01DDC007, 0x01C4C006, 0x01ABC006,
    0x0192C005, 0x0179C004, 0x0160C004, 0x0147C003, 0x012EC003, 0x0114C002, 0x00FBC002, 0x00E2C002,
    0x00C9C001, 0x00B0C001, 0x0097C001, 0x007EC000, 0x0065C000, 0x004BC000, 0x0032C000, 0x0019C000,
    0x0000C000, 0xFFE7C000, 0xFFCEC000, 0xFFB5C000, 0xFF9BC000, 0xFF82C000, 0xFF69C001, 0xFF50C001,
    0xFF37C001, 0xFF1EC002, 0xFF05C002, 0xFEECC002, 0xFED2C003, 0xFEB9C003, 0xFEA0C004, 0xFE87C004,
    0xFE6EC005, 0xFE55C006, 0xFE3CC006, 0xFE23C007, 0xFE09C008, 0xFDF0C009, 0xFDD7C009, 0xFDBEC00A,
    0xFDA5C00B, 0xFD8CC00C, 0xFD73C00D, 0xFD5AC00E, 0xFD40C00F, 0xFD27C010, 0xFD0EC011, 0xFCF5C013,
    0xFCDCC014, 0xFCC3C015, 0xFCAAC016, 0xFC91C018, 0xFC78C019, 0xFC5FC01A, 0xFC45C01C, 0xFC2CC01D,
    0xFC13C01F, 0xFBFAC020, 0xFBE1C022, 0xFBC8C024, 0xFBAFC025, 0xFB96C027, 0xFB7DC029, 0xFB64C02B,
    0xFB4BC02C, 0xFB32C02E, 0xFB19C030, 0xFB00C032, 0xFAE6C034, 0xFACDC036, 0xFAB4C038, 0xFA9BC03A,
    0xFA82C03C, 0xFA69C03F, 0xFA50C041, 0xFA37C043, 0xFA1EC045, 0xFA05C048, 0xF9ECC04A, 0xF9D3C04C,
    0xF9BAC04F, 0xF9A1C051, 0xF988C054, 0xF96FC056, 0xF956C059, 0xF93DC05C, 0xF924C05E, 0xF90BC061,
    0xF8F2C064, 0xF8D9C067, 0xF8C0C069, 0xF8A7C06C, 0xF88EC06F, 0xF875C072, 0xF85CC075, 0xF843C078,
    0xF82AC07B, 0xF811C07E, 0xF7F9C081, 0xF7E0C085, 0xF7C7C088, 0xF7AEC08B, 0xF795C08E, 0xF77CC092,
    0xF763C095, 0xF74AC098, 0xF731C09C, 0xF718C09F, 0xF6FFC0A3, 0xF6E7C0A6, 0xF6CEC0AA, 0xF6B5C0AE,
    0xF69CC0B1, 0xF683C0B5, 0xF66AC0B9, 0xF651C0BD, 0xF639C0C0, 0xF620C0C4, 0xF607C0C8, 0xF5EEC0CC,
    0xF5D5C0D0, 0xF5BCC0D4, 0xF5A4C0D8, 0xF58BC0DC, 0xF572C0E0, 0xF559C0E4, 0xF540C0E9, 0xF528C0ED,
    0xF50FC0F1, 0xF4F6C0F6, 0xF4DDC0FA, 0xF4C5C0FE, 0xF4ACC103, 0xF493C107, 0xF47BC10C, 0xF462C110,
    0xF449C115, 0xF430C119, 0xF418C11E, 0xF3FFC123, 0xF3E6C128, 0xF3CEC12C, 0xF3B5C131, 0xF39CC136,
    0xF384C13B, 0xF36BC140, 0xF352C145, 0xF33AC14A, 0xF321C14F, 0xF308C154, 0xF2F0C159, 0xF2D7C15E,
    0xF2BFC163, 0xF2A6C168, 0xF28EC16E, 0xF275C173, 0xF25CC178, 0xF244C17E, 0xF22BC183, 0xF213C189,
    0xF1FAC18E, 0xF1E2C194, 0xF1C9C199, 0xF1B1C19F, 0xF198C1A4, 0xF180C1AA, 0xF167C1B0, 0xF14FC1B6,
    0xF136C1BB, 0xF11EC1C1, 0xF105C1C7, 0xF0EDC1CD, 0xF0D5C1D3, 0xF0BCC1D9, 0xF0A4C1DF, 0xF08BC1E5,
    0xF073C1EB, 0xF05BC1F1, 0xF042C1F7, 0xF02AC1FD, 0xF012C204, 0xEFF9C20A, 0xEFE1C210, 0xEFC9C217,
    0xEFB0C21D, 0xEF98C223, 0xEF80C22A, 0xEF67C230, 0xEF4FC237, 0xEF37C23E, 0xEF1FC244, 0xEF06C24B,
    0xEEEEC251, 0xEED6C258, 0xEEBEC25F, 0xEEA6C266, 0xEE8DC26D, 0xEE75C273, 0xEE5DC27A, 0xEE45C281,
    0xEE2DC288, 0xEE15C28F, 0xEDFCC296, 0xEDE4C29D, 0xEDCCC2A5, 0xEDB4C2AC, 0xED9CC2B3, 0xED84C2BA,
    0xED6CC2C1, 0xED54C2C9, 0xED3CC2D0, 0xED24C2D8, 0xED0CC2DF, 0xECF4C2E6, 0xECDCC2EE, 0xECC4C2F5,
    0xECACC2FD, 0xEC94C305, 0xEC7CC30C, 0xEC64C314, 0xEC4CC31C, 0xEC34C323, 0xEC1CC32B, 0xEC05C333,
    0xEBEDC33B, 0xEBD5C343, 0xEBBDC34B, 0xEBA5C353, 0xEB8DC35B, 0xEB75C363, 0xEB5EC36B, 0xEB46C373,
    0xEB2EC37B, 0xEB16C383, 0xEAFFC38C, 0xEAE7C394, 0xEACFC39C, 0xEAB7C3A5, 0xEAA0C3AD, 0xEA88C3B5,
    0xEA70C3BE, 0xEA59C3C6, 0xEA41C3CF, 0xEA29C3D7, 0xEA12C3E0, 0xE9FAC3E9, 0xE9E3C3F1, 0xE9CBC3FA,
    0xE9B4C403, 0xE99CC40B, 0xE984C414, 0xE96DC41D, 0xE955C426, 0xE93EC42F, 0xE926C438, 0xE90FC441,
    0xE8F7C44A, 0xE8E0C453, 0xE8C9C45C, 0xE8B1C465, 0xE89AC46E, 0xE882C478, 0xE86BC481, 0xE854C48A,
    0xE83CC493, 0xE825C49D, 0xE80EC4A6, 0xE7F6C4B0, 0xE7DFC4B9, 0xE7C8C4C2, 0xE7B1C4CC, 0xE799C4D6,
    0xE782C4DF, 0xE76BC4E9, 0xE754C4F2, 0xE73DC4FC, 0xE725C506, 0xE70EC510, 0xE6F7C51A, 0xE6E0C523,
    0xE6C9C52D, 0xE6B2C537, 0xE69BC541, 0xE684C54B, 0xE66DC555, 0xE656C55F, 0xE63FC569, 0xE628C573,
    0xE611C57E, 0xE5FAC588, 0xE5E3C592, 0xE5CCC59C, 0xE5B5C5A7, 0xE59EC5B1, 0xE587C5BB, 0xE570C5C6,
    0xE559C5D0, 0xE542C5DB, 0xE52CC5E5, 0xE515C5F0, 0xE4FEC5FA, 0xE4E7C605, 0xE4D0C610, 0xE4BAC61A,
    0xE4A3C625, 0xE48CC630, 0xE476C63B, 0xE45FC645, 0xE448C650, 0xE432C65B, 0xE41BC666, 0xE404C671,
    0xE3EEC67C, 0xE3D7C687, 0xE3C1C692, 0xE3AAC69D, 0xE394C6A8, 0xE37DC6B4, 0xE367C6BF, 0xE350C6CA,
    0xE33AC6D5, 0xE323C6E1, 0xE30DC6EC, 0xE2F6C6F7, 0xE2E0C703, 0xE2CAC70E, 0xE2B3C71A, 0xE29DC725,
    0xE287C731, 0xE270C73D, 0xE25AC748, 0xE244C754, 0xE22DC75F, 0xE217C76B, 0xE201C777, 0xE1EBC783,
    0xE1D5C78F, 0xE1BEC79A, 0xE1A8C7A6, 0xE192C7B2, 0xE17CC7BE, 0xE166C7CA, 0xE150C7D6, 0xE13AC7E2,
    0xE124C7EE, 0xE10EC7FB, 0xE0F8C807, 0xE0E2C813, 0xE0CCC81F, 0xE0B6C82B, 0xE0A0C838, 0xE08AC844,
    0xE074C850, 0xE05EC85D, 0xE049C869, 0xE033C876, 0xE01DC882, 0xE007C88F, 0xDFF1C89B, 0xDFDCC8A8,
    0xDFC6C8B5, 0xDFB0C8C1, 0xDF9BC8CE, 0xDF85C8DB, 0xDF6FC8E8, 0xDF5AC8F4, 0xDF44C901, 0xDF2FC90E,
    0xDF19C91B, 0xDF03C928, 0xDEEEC935, 0xDED8C942, 0xDEC3C94F, 0xDEADC95C, 0xDE98C969, 0xDE83C976,
    0xDE6DC983, 0xDE58C991, 0xDE42C99E, 0xDE2DC9AB, 0xDE18C9B8, 0xDE02C9C6, 0xDDEDC9D3, 0xDDD8C9E0,
    0xDDC3C9EE, 0xDDADC9FB, 0xDD98CA09, 0xDD83CA16, 0xDD6ECA24, 0xDD59CA32, 0xDD44CA3F, 0xDD2ECA4D,
    0xDD19CA5B, 0xDD04CA68, 0xDCEFCA76, 0xDCDACA84, 0xDCC5CA92, 0xDCB0CA9F, 0xDC9BCAAD, 0xDC86CABB,
    0xDC72CAC9, 0xDC5DCAD7, 0xDC48CAE5, 0xDC33CAF3, 0xDC1ECB01, 0xDC09CB0F, 0xDBF5CB1E, 0xDBE0CB2C,
    0xDBCBCB3A, 0xDBB6CB48, 0xDBA2CB56, 0xDB8DCB65, 0xDB78CB73, 0xDB64CB81, 0xDB4FCB90, 0xDB3BCB9E,
    0xDB26CBAD, 0xDB11CBBB, 0xDAFDCBCA, 0xDAE8CBD8, 0xDAD4CBE7, 0xDABFCBF5, 0xDAABCC04, 0xDA97CC13,
    0xDA82CC21, 0xDA6ECC30, 0xDA5ACC3F, 0xDA45CC4E, 0xDA31CC5D, 0xDA1DCC6B, 0xDA08CC7A, 0xD9F4CC89,
    0xD9E0CC98, 0xD9CCCCA7, 0xD9B8CCB6, 0xD9A4CCC5, 0xD98FCCD4, 0xD97BCCE3, 0xD967CCF3, 0xD953CD02,
    0xD93FCD11, 0xD92BCD20, 0xD917CD30, 0xD903CD3F, 0xD8EFCD4E, 0xD8DCCD5D, 0xD8C8CD6D, 0xD8B4CD7C,
    0xD8A0CD8C, 0xD88CCD9B, 0xD878CDAB, 0xD865CDBA, 0xD851CDCA, 0xD83DCDD9, 0xD82ACDE9, 0xD816CDF9,
    0xD802CE08, 0xD7EFCE18, 0xD7DBCE28, 0xD7C8CE38, 0xD7B4CE47, 0xD7A0CE57, 0xD78DCE67, 0xD77ACE77,
    0xD766CE87, 0xD753CE97, 0xD73FCEA7, 0xD72CCEB7, 0xD719CEC7, 0xD705CED7, 0xD6F2CEE7, 0xD6DFCEF7,
    0xD6CBCF07, 0xD6B8CF18, 0xD6A5CF28, 0xD692CF38, 0xD67FCF48, 0xD66CCF59, 0xD659CF69, 0xD645CF79,
    0xD632CF8A, 0xD61FCF9A, 0xD60CCFAB, 0xD5F9CFBB, 0xD5E6CFCC, 0xD5D4CFDC, 0xD5C1CFED, 0xD5AECFFE,
    0xD59BD00E, 0xD588D01F, 0xD575D030, 0xD563D040, 0xD550D051, 0xD53DD062, 0xD52AD073, 0xD518D083,
    0xD505D094, 0xD4F3D0A5, 0xD4E0D0B6, 0xD4CDD0C7, 0xD4BBD0D8, 0xD4A8D0E9, 0xD496D0FA, 0xD483D10B,
    0xD471D11C, 0xD45FD12D, 0xD44CD13E, 0xD43AD150, 0xD428D161, 0xD415D172, 0xD403D183, 0xD3F1D195,
    0xD3DFD1A6, 0xD3CCD1B7, 0xD3BAD1C9, 0xD3A8D1DA, 0xD396D1EB, 0xD384D1FD, 0xD372D20E, 0xD360D220,
    0xD34ED231, 0xD33CD243, 0xD32AD255, 0xD318D266, 0xD306D278, 0xD2F4D28A, 0xD2E2D29B, 0xD2D1D2AD,
    0xD2BFD2BF, 0xD2ADD2D1, 0xD29BD2E2, 0xD28AD2F4, 0xD278D306, 0xD266D318, 0xD255D32A, 0xD243D33C,
    0xD231D34E, 0xD220D360, 0xD20ED372, 0xD1FDD384, 0xD1EBD396, 0xD1DAD3A8, 0xD1C9D3BA, 0xD1B7D3CC,
    0xD1A6D3DF, 0xD195D3F1, 0xD183D403, 0xD172D415, 0xD161D428, 0xD150D43A, 0xD13ED44C, 0xD12DD45F,
    0xD11CD471, 0xD10BD483, 0xD0FAD496, 0xD0E9D4A8, 0xD0D8D4BB, 0xD0C7D4CD, 0xD0B6D4E0, 0xD0A5D4F3,
    0xD094D505, 0xD083D518, 0xD073D52A, 0xD062D53D, 0xD051D550, 0xD040D563, 0xD030D575, 0xD01FD588,
    0xD00ED59B, 0xCFFED5AE, 0xCFEDD5C1, 0xCFDCD5D4, 0xCFCCD5E6, 0xCFBBD5F9, 0xCFABD60C, 0xCF9AD61F,
    0xCF8AD632, 0xCF79D645, 0xCF69D659, 0xCF59D66C, 0xCF48D67F, 0xCF38D692, 0xCF28D6A5, 0xCF18D6B8,
    0xCF07D6CB, 0xCEF7D6DF, 0xCEE7D6F2, 0xCED7D705, 0xCEC7D719, 0xCEB7D72C, 0xCEA7D73F, 0xCE97D753,
    0xCE87D766, 0xCE77D77A, 0xCE67D78D, 0xCE57D7A0, 0xCE47D7B4, 0xCE38D7C8, 0xCE28D7DB, 0xCE18D7EF,
    0xCE08D802, 0xCDF9D816, 0xCDE9D82A, 0xCDD9D83D, 0xCDCAD851, 0xCDBAD865, 0xCDABD878, 0xCD9BD88C,
    0xCD8CD8A0, 0xCD7CD8B4, 0xCD6DD8C8, 0xCD5DD8DC, 0xCD4ED8EF, 0xCD3FD903, 0xCD30D917, 0xCD20D92B,
    0xCD11D93F, 0xCD02D953, 0xCCF3D967, 0xCCE3D97B, 0xCCD4D98F, 0xCCC5D9A4, 0xCCB6D9B8, 0xCCA7D9CC,
    0xCC98D9E0, 0xCC89D9F4, 0xCC7ADA08, 0xCC6BDA1D, 0xCC5DDA31, 0xCC4EDA45, 0xCC3FDA5A, 0xCC30DA6E,
    0xCC21DA82, 0xCC13DA97, 0xCC04DAAB, 0xCBF5DABF, 0xCBE7DAD4, 0xCBD8DAE8, 0xCBCADAFD, 0xCBBBDB11,
    0xCBADDB26, 0xCB9EDB3B, 0xCB90DB4F, 0xCB81DB64, 0xCB73DB78, 0xCB65DB8D, 0xCB56DBA2, 0xCB48DBB6,
    0xCB3ADBCB, 0xCB2CDBE0, 0xCB1EDBF5, 0xCB0FDC09, 0xCB01DC1E, 0xCAF3DC33, 0xCAE5DC48, 0xCAD7DC5D,
    0xCAC9DC72, 0xCABBDC86, 0xCAADDC9B, 0xCA9FDCB0, 0xCA92DCC5, 0xCA84DCDA, 0xCA76DCEF, 0xCA68DD04,
    0xCA5BDD19, 0xCA4DDD2E, 0xCA3FDD44, 0xCA32DD59, 0xCA24DD6E, 0xCA16DD83, 0xCA09DD98, 0xC9FBDDAD,
    0xC9EEDDC3, 0xC9E0DDD8, 0xC9D3DDED, 0xC9C6DE02, 0xC9B8DE18, 0xC9ABDE2D, 0xC99EDE42, 0xC991DE58,
    0xC983DE6D, 0xC976DE83, 0xC969DE98, 0xC95CDEAD, 0xC94FDEC3, 0xC942DED8, 0xC935DEEE, 0xC928DF03,
    0xC91BDF19, 0xC90EDF2F, 0xC901DF44, 0xC8F4DF5A, 0xC8E8DF6F, 0xC8DBDF85, 0xC8CEDF9B, 0xC8C1DFB0,
    0xC8B5DFC6, 0xC8A8DFDC, 0xC89BDFF1, 0xC88FE007, 0xC882E01D, 0xC876E033, 0xC869E049, 0xC85DE05E,
    0xC850E074, 0xC844E08A, 0xC838E0A0, 0xC82BE0B6, 0xC81FE0CC, 0xC813E0E2, 0xC807E0F8, 0xC7FBE10E,
    0xC7EEE124, 0xC7E2E13A, 0xC7D6E150, 0xC7CAE166, 0xC7BEE17C, 0xC7B2E192, 0xC7A6E1A8, 0xC79AE1BE,
    0xC78FE1D5, 0xC783E1EB, 0xC777E201, 0xC76BE217, 0xC75FE22D, 0xC754E244, 0xC748E25A, 0xC73DE270,
    0xC731E287, 0xC725E29D, 0xC71AE2B3, 0xC70EE2CA, 0xC703E2E0, 0xC6F7E2F6, 0xC6ECE30D, 0xC6E1E323,
    0xC6D5E33A, 0xC6CAE350, 0xC6BFE367, 0xC6B4E37D, 0xC6A8E394, 0xC69DE3AA, 0xC692E3C1, 0xC687E3D7,
    0xC67CE3EE, 0xC671E404, 0xC666E41B, 0xC65BE432, 0xC650E448, 0xC645E45F, 0xC63BE476, 0xC630E48C,
    0xC625E4A3, 0xC61AE4BA, 0xC610E4D0, 0xC605E4E7, 0xC5FAE4FE, 0xC5F0E515, 0xC5E5E52C, 0xC5DBE542,
    0xC5D0E559, 0xC5C6E570, 0xC5BBE587, 0xC5B1E59E, 0xC5A7E5B5, 0xC59CE5CC, 0xC592E5E3, 0xC588E5FA,
    0xC57EE611, 0xC573E628, 0xC569E63F, 0xC55FE656, 0xC555E66D, 0xC54BE684, 0xC541E69B, 0xC537E6B2,
    0xC52DE6C9, 0xC523E6E0, 0xC51AE6F7, 0xC510E70E, 0xC506E725, 0xC4FCE73D, 0xC4F2E754, 0xC4E9E76B,
    0xC4DFE782, 0xC4D6E799, 0xC4CCE7B1, 0xC4C2E7C8, 0xC4B9E7DF, 0xC4B0E7F6, 0xC4A6E80E, 0xC49DE825,
    0xC493E83C, 0xC48AE854, 0xC481E86B, 0xC478E882, 0xC46EE89A, 0xC465E8B1, 0xC45CE8C9, 0xC453E8E0,
    0xC44AE8F7, 0xC441E90F, 0xC438E926, 0xC42FE93E, 0xC426E955, 0xC41DE96D, 0xC414E984, 0xC40BE99C,
    0xC403E9B4, 0xC3FAE9CB, 0xC3F1E9E3, 0xC3E9E9FA, 0xC3E0EA12, 0xC3D7EA29, 0xC3CFEA41, 0xC3C6EA59,
    0xC3BEEA70, 0xC3B5EA88, 0xC3ADEAA0, 0xC3A5EAB7, 0xC39CEACF, 0xC394EAE7, 0xC38CEAFF, 0xC383EB16,
    0xC37BEB2E, 0xC373EB46, 0xC36BEB5E, 0xC363EB75, 0xC35BEB8D, 0xC353EBA5, 0xC34BEBBD, 0xC343EBD5,
    0xC33BEBED, 0xC333EC05, 0xC32BEC1C, 0xC323EC34, 0xC31CEC4C, 0xC314EC64, 0xC30CEC7C, 0xC305EC94,
    0xC2FDECAC, 0xC2F5ECC4, 0xC2EEECDC, 0xC2E6ECF4, 0xC2DFED0C, 0xC2D8ED24, 0xC2D0ED3C, 0xC2C9ED54,
    0xC2C1ED6C, 0xC2BAED84, 0xC2B3ED9C, 0xC2ACEDB4, 0xC2A5EDCC, 0xC29DEDE4, 0xC296EDFC, 0xC28FEE15,
    0xC288EE2D, 0xC281EE45, 0xC27AEE5D, 0xC273EE75, 0xC26DEE8D, 0xC266EEA6, 0xC25FEEBE, 0xC258EED6,
    0xC251EEEE, 0xC24BEF06, 0xC244EF1F, 0xC23EEF37, 0xC237EF4F, 0xC230EF67, 0xC22AEF80, 0xC223EF98,
    0xC21DEFB0, 0xC217EFC9, 0xC210EFE1, 0xC20AEFF9, 0xC204F012, 0xC1FDF02A, 0xC1F7F042, 0xC1F1F05B,
    0xC1EBF073, 0xC1E5F08B, 0xC1DFF0A4, 0xC1D9F0BC, 0xC1D3F0D5, 0xC1CDF0ED, 0xC1C7F105, 0xC1C1F11E,
    0xC1BBF136, 0xC1B6F14F, 0xC1B0F167, 0xC1AAF180, 0xC1A4F198, 0xC19FF1B1, 0xC199F1C9, 0xC194F1E2,
    0xC18EF1FA, 0xC189F213, 0xC183F22B, 0xC17EF244, 0xC178F25C, 0xC173F275, 0xC16EF28E, 0xC168F2A6,
    0xC163F2BF, 0xC15EF2D7, 0xC159F2F0, 0xC154F308, 0xC14FF321, 0xC14AF33A, 0xC145F352, 0xC140F36B,
    0xC13BF384, 0xC136F39C, 0xC131F3B5, 0xC12CF3CE, 0xC128F3E6, 0xC123F3FF, 0xC11EF418, 0xC119F430,
    0xC115F449, 0xC110F462, 0xC10CF47B, 0xC107F493, 0xC103F4AC, 0xC0FEF4C5, 0xC0FAF4DD, 0xC0F6F4F6,
    0xC0F1F50F, 0xC0EDF528, 0xC0E9F540, 0xC0E4F559, 0xC0E0F572, 0xC0DCF58B, 0xC0D8F5A4, 0xC0D4F5BC,
    0xC0D0F5D5, 0xC0CCF5EE, 0xC0C8F607, 0xC0C4F620, 0xC0C0F639, 0xC0BDF651, 0xC0B9F66A, 0xC0B5F683,
    0xC0B1F69C, 0xC0AEF6B5, 0xC0AAF6CE, 0xC0A6F6E7, 0xC0A3F6FF, 0xC09FF718, 0xC09CF731, 0xC098F74A,
    0xC095F763, 0xC092F77C, 0xC08EF795, 0xC08BF7AE, 0xC088F7C7, 0xC085F7E0, 0xC081F7F9, 0xC07EF811,
    0xC07BF82A, 0xC078F843, 0xC075F85C, 0xC072F875, 0xC06FF88E, 0xC06CF8A7, 0xC069F8C0, 0xC067F8D9,
    0xC064F8F2, 0xC061F90B, 0xC05EF924, 0xC05CF93D, 0xC059F956, 0xC056F96F, 0xC054F988, 0xC051F9A1,
    0xC04FF9BA, 0xC04CF9D3, 0xC04AF9EC, 0xC048FA05, 0xC045FA1E, 0xC043FA37, 0xC041FA50, 0xC03FFA69,
    0xC03CFA82, 0xC03AFA9B, 0xC038FAB4, 0xC036FACD, 0xC034FAE6, 0xC032FB00, 0xC030FB19, 0xC02EFB32,
    0xC02CFB4B, 0xC02BFB64, 0xC029FB7D, 0xC027FB96, 0xC025FBAF, 0xC024FBC8, 0xC022FBE1, 0xC020FBFA,
    0xC01FFC13, 0xC01DFC2C, 0xC01CFC45, 0xC01AFC5F, 0xC019FC78, 0xC018FC91, 0xC016FCAA, 0xC015FCC3,
    0xC014FCDC, 0xC013FCF5, 0xC011FD0E, 0xC010FD27, 0xC00FFD40, 0xC00EFD5A, 0xC00DFD73, 0xC00CFD8C,
    0xC00BFDA5, 0xC00AFDBE, 0xC009FDD7, 0xC009FDF0, 0xC008FE09, 0xC007FE23, 0xC006FE3C, 0xC006FE55,
    0xC005FE6E, 0xC004FE87, 0xC004FEA0, 0xC003FEB9, 0xC003FED2, 0xC002FEEC, 0xC002FF05, 0xC002FF1E,
    0xC001FF37, 0xC001FF50, 0xC001FF69, 0xC000FF82, 0xC000FF9B, 0xC000FFB5, 0xC000FFCE, 0xC000FFE7,
    0xC0000000, 0xC0000019, 0xC0000032, 0xC000004B, 0xC0000065, 0xC000007E, 0xC0010097, 0xC00100B0,
    0xC00100C9, 0xC00200E2, 0xC00200FB, 0xC0020114, 0xC003012E, 0xC0030147, 0xC0040160, 0xC0040179,
    0xC0050192, 0xC00601AB, 0xC00601C4, 0xC00701DD, 0xC00801F7, 0xC0090210, 0xC0090229, 0xC00A0242,
    0xC00B025B, 0xC00C0274, 0xC00D028D, 0xC00E02A6, 0xC00F02C0, 0xC01002D9, 0xC01102F2, 0xC013030B,
    0xC0140324, 0xC015033D, 0xC0160356, 0xC018036F, 0xC0190388, 0xC01A03A1, 0xC01C03BB, 0xC01D03D4,
    0xC01F03ED, 0xC0200406, 0xC022041F, 0xC0240438, 0xC0250451, 0xC027046A, 0xC0290483, 0xC02B049C,
    0xC02C04B5, 0xC02E04CE, 0xC03004E7, 0xC0320500, 0xC034051A, 0xC0360533, 0xC038054C, 0xC03A0565,
    0xC03C057E, 0xC03F0597, 0xC04105B0, 0xC04305C9, 0xC04505E2, 0xC04805FB, 0xC04A0614, 0xC04C062D,
    0xC04F0646, 0xC051065F, 0xC0540678, 0xC0560691, 0xC05906AA, 0xC05C06C3, 0xC05E06DC, 0xC06106F5,
    0xC064070E, 0xC0670727, 0xC0690740, 0xC06C0759, 0xC06F0772, 0xC072078B, 0xC07507A4, 0xC07807BD,
    0xC07B07D6, 0xC07E07EF, 0xC0810807, 0xC0850820, 0xC0880839, 0xC08B0852, 0xC08E086B, 0xC0920884,
    0xC095089D, 0xC09808B6, 0xC09C08CF, 0xC09F08E8, 0xC0A30901, 0xC0A60919, 0xC0AA0932, 0xC0AE094B,
    0xC0B10964, 0xC0B5097D, 0xC0B90996, 0xC0BD09AF, 0xC0C009C7, 0xC0C409E0, 0xC0C809F9, 0xC0CC0A12,
    0xC0D00A2B, 0xC0D40A44, 0xC0D80A5C, 0xC0DC0A75, 0xC0E00A8E, 0xC0E40AA7, 0xC0E90AC0, 0xC0ED0AD8,
    0xC0F10AF1, 0xC0F60B0A, 0xC0FA0B23, 0xC0FE0B3B, 0xC1030B54, 0xC1070B6D, 0xC10C0B85, 0xC1100B9E,
    0xC1150BB7, 0xC1190BD0, 0xC11E0BE8, 0xC1230C01, 0xC1280C1A, 0xC12C0C32, 0xC1310C4B, 0xC1360C64,
    0xC13B0C7C, 0xC1400C95, 0xC1450CAE, 0xC14A0CC6, 0xC14F0CDF, 0xC1540CF8, 0xC1590D10, 0xC15E0D29,
    0xC1630D41, 0xC1680D5A, 0xC16E0D72, 0xC1730D8B, 0xC1780DA4, 0xC17E0DBC, 0xC1830DD5, 0xC1890DED,
    0xC18E0E06, 0xC1940E1E, 0xC1990E37, 0xC19F0E4F, 0xC1A40E68, 0xC1AA0E80, 0xC1B00E99, 0xC1B60EB1,
    0xC1BB0ECA, 0xC1C10EE2, 0xC1C70EFB, 0xC1CD0F13, 0xC1D30F2B, 0xC1D90F44, 0xC1DF0F5C, 0xC1E50F75,
    0xC1EB0F8D, 0xC1F10FA5, 0xC1F70FBE, 0xC1FD0FD6, 0xC2040FEE, 0xC20A1007, 0xC210101F, 0xC2171037,
    0xC21D1050, 0xC2231068, 0xC22A1080, 0xC2301099, 0xC23710B1, 0xC23E10C9, 0xC24410E1, 0xC24B10FA,
    0xC2511112, 0xC258112A, 0xC25F1142, 0xC266115A, 0xC26D1173, 0xC273118B, 0xC27A11A3, 0xC28111BB,
    0xC28811D3, 0xC28F11EB, 0xC2961204, 0xC29D121C, 0xC2A51234, 0xC2AC124C, 0xC2B31264, 0xC2BA127C,
    0xC2C11294, 0xC2C912AC, 0xC2D012C4, 0xC2D812DC, 0xC2DF12F4, 0xC2E6130C, 0xC2EE1324, 0xC2F5133C,
    0xC2FD1354, 0xC305136C, 0xC30C1384, 0xC314139C, 0xC31C13B4, 0xC32313CC, 0xC32B13E4, 0xC33313FB,
    0xC33B1413, 0xC343142B, 0xC34B1443, 0xC353145B, 0xC35B1473, 0xC363148B, 0xC36B14A2, 0xC37314BA,
    0xC37B14D2, 0xC38314EA, 0xC38C1501, 0xC3941519, 0xC39C1531, 0xC3A51549, 0xC3AD1560, 0xC3B51578,
    0xC3BE1590, 0xC3C615A7, 0xC3CF15BF, 0xC3D715D7, 0xC3E015EE, 0xC3E91606, 0xC3F1161D, 0xC3FA1635,
    0xC403164C, 0xC40B1664, 0xC414167C, 0xC41D1693, 0xC42616AB, 0xC42F16C2, 0xC43816DA, 0xC44116F1,
    0xC44A1709, 0xC4531720, 0xC45C1737, 0xC465174F, 0xC46E1766, 0xC478177E, 0xC4811795, 0xC48A17AC,
    0xC49317C4, 0xC49D17DB, 0xC4A617F2, 0xC4B0180A, 0xC4B91821, 0xC4C21838, 0xC4CC184F, 0xC4D61867,
    0xC4DF187E, 0xC4E91895, 0xC4F218AC, 0xC4FC18C3, 0xC50618DB, 0xC51018F2, 0xC51A1909, 0xC5231920,
    0xC52D1937, 0xC537194E, 0xC5411965, 0xC54B197C, 0xC5551993, 0xC55F19AA, 0xC56919C1, 0xC57319D8,
    0xC57E19EF, 0xC5881A06, 0xC5921A1D, 0xC59C1A34, 0xC5A71A4B, 0xC5B11A62, 0xC5BB1A79, 0xC5C61A90,
    0xC5D01AA7, 0xC5DB1ABE, 0xC5E51AD4, 0xC5F01AEB, 0xC5FA1B02, 0xC6051B19, 0xC6101B30, 0xC61A1B46,
    0xC6251B5D, 0xC6301B74, 0xC63B1B8A, 0xC6451BA1, 0xC6501BB8, 0xC65B1BCE, 0xC6661BE5, 0xC6711BFC,
    0xC67C1C12, 0xC6871C29, 0xC6921C3F, 0xC69D1C56, 0xC6A81C6C, 0xC6B41C83, 0xC6BF1C99, 0xC6CA1CB0,
    0xC6D51CC6, 0xC6E11CDD, 0xC6EC1CF3, 0xC6F71D0A, 0xC7031D20, 0xC70E1D36, 0xC71A1D4D, 0xC7251D63,
    0xC7311D79, 0xC73D1D90, 0xC7481DA6, 0xC7541DBC, 0xC75F1DD3, 0xC76B1DE9, 0xC7771DFF, 0xC7831E15,
    0xC78F1E2B, 0xC79A1E42, 0xC7A61E58, 0xC7B21E6E, 0xC7BE1E84, 0xC7CA1E9A, 0xC7D61EB0, 0xC7E21EC6,
    0xC7EE1EDC, 0xC7FB1EF2, 0xC8071F08, 0xC8131F1E, 0xC81F1F34, 0xC82B1F4A, 0xC8381F60, 0xC8441F76,
    0xC8501F8C, 0xC85D1FA2, 0xC8691FB7, 0xC8761FCD, 0xC8821FE3, 0xC88F1FF9, 0xC89B200F, 0xC8A82024,
    0xC8B5203A, 0xC8C12050, 0xC8CE2065, 0xC8DB207B, 0xC8E82091, 0xC8F420A6, 0xC90120BC, 0xC90E20D1,
    0xC91B20E7, 0xC92820FD, 0xC9352112, 0xC9422128, 0xC94F213D, 0xC95C2153, 0xC9692168, 0xC976217D,
    0xC9832193, 0xC99121A8, 0xC99E21BE, 0xC9AB21D3, 0xC9B821E8, 0xC9C621FE, 0xC9D32213, 0xC9E02228,
    0xC9EE223D, 0xC9FB2253, 0xCA092268, 0xCA16227D, 0xCA242292, 0xCA3222A7, 0xCA3F22BC, 0xCA4D22D2,
    0xCA5B22E7, 0xCA6822FC, 0xCA762311, 0xCA842326, 0xCA92233B, 0xCA9F2350, 0xCAAD2365, 0xCABB237A,
    0xCAC9238E, 0xCAD723A3, 0xCAE523B8, 0xCAF323CD, 0xCB0123E2, 0xCB0F23F7, 0xCB1E240B, 0xCB2C2420,
    0xCB3A2435, 0xCB48244A, 0xCB56245E, 0xCB652473, 0xCB732488, 0xCB81249C, 0xCB9024B1, 0xCB9E24C5,
    0xCBAD24DA, 0xCBBB24EF, 0xCBCA2503, 0xCBD82518, 0xCBE7252C, 0xCBF52541, 0xCC042555, 0xCC132569,
    0xCC21257E, 0xCC302592, 0xCC3F25A6, 0xCC4E25BB, 0xCC5D25CF, 0xCC6B25E3, 0xCC7A25F8, 0xCC89260C,
    0xCC982620, 0xCCA72634, 0xCCB62648, 0xCCC5265C, 0xCCD42671, 0xCCE32685, 0xCCF32699, 0xCD0226AD,
    0xCD1126C1, 0xCD2026D5, 0xCD3026E9, 0xCD3F26FD, 0xCD4E2711, 0xCD5D2724, 0xCD6D2738, 0xCD7C274C,
    0xCD8C2760, 0xCD9B2774, 0xCDAB2788, 0xCDBA279B, 0xCDCA27AF, 0xCDD927C3, 0xCDE927D6, 0xCDF927EA,
    0xCE0827FE, 0xCE182811, 0xCE282825, 0xCE382838, 0xCE47284C, 0xCE572860, 0xCE672873, 0xCE772886,
    0xCE87289A, 0xCE9728AD, 0xCEA728C1, 0xCEB728D4, 0xCEC728E7, 0xCED728FB, 0xCEE7290E, 0xCEF72921,
    0xCF072935, 0xCF182948, 0xCF28295B, 0xCF38296E, 0xCF482981, 0xCF592994, 0xCF6929A7, 0xCF7929BB,
    0xCF8A29CE, 0xCF9A29E1, 0xCFAB29F4, 0xCFBB2A07, 0xCFCC2A1A, 0xCFDC2A2C, 0xCFED2A3F, 0xCFFE2A52,
    0xD00E2A65, 0xD01F2A78, 0xD0302A8B, 0xD0402A9D, 0xD0512AB0, 0xD0622AC3, 0xD0732AD6, 0xD0832AE8,
    0xD0942AFB, 0xD0A52B0D, 0xD0B62B20, 0xD0C72B33, 0xD0D82B45, 0xD0E92B58, 0xD0FA2B6A, 0xD10B2B7D,
    0xD11C2B8F, 0xD12D2BA1, 0xD13E2BB4, 0xD1502BC6, 0xD1612BD8, 0xD1722BEB, 0xD1832BFD, 0xD1952C0F,
    0xD1A62C21, 0xD1B72C34, 0xD1C92C46, 0xD1DA2C58, 0xD1EB2C6A, 0xD1FD2C7C, 0xD20E2C8E, 0xD2202CA0,
    0xD2312CB2, 0xD2432CC4, 0xD2552CD6, 0xD2662CE8, 0xD2782CFA, 0xD28A2D0C, 0xD29B2D1E, 0xD2AD2D2F,
    0xD2BF2D41, 0xD2D12D53, 0xD2E22D65, 0xD2F42D76, 0xD3062D88, 0xD3182D9A, 0xD32A2DAB, 0xD33C2DBD,
    0xD34E2DCF, 0xD3602DE0, 0xD3722DF2, 0xD3842E03, 0xD3962E15, 0xD3A82E26, 0xD3BA2E37, 0xD3CC2E49,
    0xD3DF2E5A, 0xD3F12E6B, 0xD4032E7D, 0xD4152E8E, 0xD4282E9F, 0xD43A2EB0, 0xD44C2EC2, 0xD45F2ED3,
    0xD4712EE4, 0xD4832EF5, 0xD4962F06, 0xD4A82F17, 0xD4BB2F28, 0xD4CD2F39, 0xD4E02F4A, 0xD4F32F5B,
    0xD5052F6C, 0xD5182F7D, 0xD52A2F8D, 0xD53D2F9E, 0xD5502FAF, 0xD5632FC0, 0xD5752FD0, 0xD5882FE1,
    0xD59B2FF2, 0xD5AE3002, 0xD5C13013, 0xD5D43024, 0xD5E63034, 0xD5F93045, 0xD60C3055, 0xD61F3066,
    0xD6323076, 0xD6453087, 0xD6593097, 0xD66C30A7, 0xD67F30B8, 0xD69230C8, 0xD6A530D8, 0xD6B830E8,
    0xD6CB30F9, 0xD6DF3109, 0xD6F23119, 0xD7053129, 0xD7193139, 0xD72C3149, 0xD73F3159, 0xD7533169,
    0xD7663179, 0xD77A3189, 0xD78D3199, 0xD7A031A9, 0xD7B431B9, 0xD7C831C8, 0xD7DB31D8, 0xD7EF31E8,
    0xD80231F8, 0xD8163207, 0xD82A3217, 0xD83D3227, 0xD8513236, 0xD8653246, 0xD8783255, 0xD88C3265,
    0xD8A03274, 0xD8B43284, 0xD8C83293, 0xD8DC32A3, 0xD8EF32B2, 0xD90332C1, 0xD91732D0, 0xD92B32E0,
    0xD93F32EF, 0xD95332FE, 0xD967330D, 0xD97B331D, 0xD98F332C, 0xD9A4333B, 0xD9B8334A, 0xD9CC3359,
    0xD9E03368, 0xD9F43377, 0xDA083386, 0xDA1D3395, 0xDA3133A3, 0xDA4533B2, 0xDA5A33C1, 0xDA6E33D0,
    0xDA8233DF, 0xDA9733ED, 0xDAAB33FC, 0xDABF340B, 0xDAD43419, 0xDAE83428, 0xDAFD3436, 0xDB113445,
    0xDB263453, 0xDB3B3462, 0xDB4F3470, 0xDB64347F, 0xDB78348D, 0xDB8D349B, 0xDBA234AA, 0xDBB634B8,
    0xDBCB34C6, 0xDBE034D4, 0xDBF534E2, 0xDC0934F1, 0xDC1E34FF, 0xDC33350D, 0xDC48351B, 0xDC5D3529,
    0xDC723537, 0xDC863545, 0xDC9B3553, 0xDCB03561, 0xDCC5356E, 0xDCDA357C, 0xDCEF358A, 0xDD043598,
    0xDD1935A5, 0xDD2E35B3, 0xDD4435C1, 0xDD5935CE, 0xDD6E35DC, 0xDD8335EA, 0xDD9835F7, 0xDDAD3605,
    0xDDC33612, 0xDDD83620, 0xDDED362D, 0xDE02363A, 0xDE183648, 0xDE2D3655, 0xDE423662, 0xDE58366F,
    0xDE6D367D, 0xDE83368A, 0xDE983697, 0xDEAD36A4, 0xDEC336B1, 0xDED836BE, 0xDEEE36CB, 0xDF0336D8,
    0xDF1936E5, 0xDF2F36F2, 0xDF4436FF, 0xDF5A370C, 0xDF6F3718, 0xDF853725, 0xDF9B3732, 0xDFB0373F,
    0xDFC6374B, 0xDFDC3758, 0xDFF13765, 0xE0073771, 0xE01D377E, 0xE033378A, 0xE0493797, 0xE05E37A3,
    0xE07437B0, 0xE08A37BC, 0xE0A037C8, 0xE0B637D5, 0xE0CC37E1, 0xE0E237ED, 0xE0F837F9, 0xE10E3805,
    0xE1243812, 0xE13A381E, 0xE150382A, 0xE1663836, 0xE17C3842, 0xE192384E, 0xE1A8385A, 0xE1BE3866,
    0xE1D53871, 0xE1EB387D, 0xE2013889, 0xE2173895, 0xE22D38A1, 0xE24438AC, 0xE25A38B8, 0xE27038C3,
    0xE28738CF, 0xE29D38DB, 0xE2B338E6, 0xE2CA38F2, 0xE2E038FD, 0xE2F63909, 0xE30D3914, 0xE323391F,
    0xE33A392B, 0xE3503936, 0xE3673941, 0xE37D394C, 0xE3943958, 0xE3AA3963, 0xE3C1396E, 0xE3D73979,
    0xE3EE3984, 0xE404398F, 0xE41B399A, 0xE43239A5, 0xE44839B0, 0xE45F39BB, 0xE47639C5, 0xE48C39D0,
    0xE4A339DB, 0xE4BA39E6, 0xE4D039F0, 0xE4E739FB, 0xE4FE3A06, 0xE5153A10, 0xE52C3A1B, 0xE5423A25,
    0xE5593A30, 0xE5703A3A, 0xE5873A45, 0xE59E3A4F, 0xE5B53A59, 0xE5CC3A64, 0xE5E33A6E, 0xE5FA3A78,
    0xE6113A82, 0xE6283A8D, 0xE63F3A97, 0xE6563AA1, 0xE66D3AAB, 0xE6843AB5, 0xE69B3ABF, 0xE6B23AC9,
    0xE6C93AD3, 0xE6E03ADD, 0xE6F73AE6, 0xE70E3AF0, 0xE7253AFA, 0xE73D3B04, 0xE7543B0E, 0xE76B3B17,
    0xE7823B21, 0xE7993B2A, 0xE7B13B34, 0xE7C83B3E, 0xE7DF3B47, 0xE7F63B50, 0xE80E3B5A, 0xE8253B63,
    0xE83C3B6D, 0xE8543B76, 0xE86B3B7F, 0xE8823B88, 0xE89A3B92, 0xE8B13B9B, 0xE8C93BA4, 0xE8E03BAD,
    0xE8F73BB6, 0xE90F3BBF, 0xE9263BC8, 0xE93E3BD1, 0xE9553BDA, 0xE96D3BE3, 0xE9843BEC, 0xE99C3BF5,
    0xE9B43BFD, 0xE9CB3C06, 0xE9E33C0F, 0xE9FA3C17, 0xEA123C20, 0xEA293C29, 0xEA413C31, 0xEA593C3A,
    0xEA703C42, 0xEA883C4B, 0xEAA03C53, 0xEAB73C5B, 0xEACF3C64, 0xEAE73C6C, 0xEAFF3C74, 0xEB163C7D,
    0xEB2E3C85, 0xEB463C8D, 0xEB5E3C95, 0xEB753C9D, 0xEB8D3CA5, 0xEBA53CAD, 0xEBBD3CB5, 0xEBD53CBD,
    0xEBED3CC5, 0xEC053CCD, 0xEC1C3CD5, 0xEC343CDD, 0xEC4C3CE4, 0xEC643CEC, 0xEC7C3CF4, 0xEC943CFB,
    0xECAC3D03, 0xECC43D0B, 0xECDC3D12, 0xECF43D1A, 0xED0C3D21, 0xED243D28, 0xED3C3D30, 0xED543D37,
    0xED6C3D3F, 0xED843D46, 0xED9C3D4D, 0xEDB43D54, 0xEDCC3D5B, 0xEDE43D63, 0xEDFC3D6A, 0xEE153D71,
    0xEE2D3D78, 0xEE453D7F, 0xEE5D3D86, 0xEE753D8D, 0xEE8D3D93, 0xEEA63D9A, 0xEEBE3DA1, 0xEED63DA8,
    0xEEEE3DAF, 0xEF063DB5, 0xEF1F3DBC, 0xEF373DC2, 0xEF4F3DC9, 0xEF673DD0, 0xEF803DD6, 0xEF983DDD,
    0xEFB03DE3, 0xEFC93DE9, 0xEFE13DF0, 0xEFF93DF6, 0xF0123DFC, 0xF02A3E03, 0xF0423E09, 0xF05B3E0F,
    0xF0733E15, 0xF08B3E1B, 0xF0A43E21, 0xF0BC3E27, 0xF0D53E2D, 0xF0ED3E33, 0xF1053E39, 0xF11E3E3F,
    0xF1363E45, 0xF14F3E4A, 0xF1673E50, 0xF1803E56, 0xF1983E5C, 0xF1B13E61, 0xF1C93E67, 0xF1E23E6C,
    0xF1FA3E72, 0xF2133E77, 0xF22B3E7D, 0xF2443E82, 0xF25C3E88, 0xF2753E8D, 0xF28E3E92, 0xF2A63E98,
    0xF2BF3E9D, 0xF2D73EA2, 0xF2F03EA7, 0xF3083EAC, 0xF3213EB1, 0xF33A3EB6, 0xF3523EBB, 0xF36B3EC0,
    0xF3843EC5, 0xF39C3ECA, 0xF3B53ECF, 0xF3CE3ED4, 0xF3E63ED8, 0xF3FF3EDD, 0xF4183EE2, 0xF4303EE7,
    0xF4493EEB, 0xF4623EF0, 0xF47B3EF4, 0xF4933EF9, 0xF4AC3EFD, 0xF4C53F02, 0xF4DD3F06, 0xF4F63F0A,
    0xF50F3F0F, 0xF5283F13, 0xF5403F17, 0xF5593F1C, 0xF5723F20, 0xF58B3F24, 0xF5A43F28, 0xF5BC3F2C,
    0xF5D53F30, 0xF5EE3F34, 0xF6073F38, 0xF6203F3C, 0xF6393F40, 0xF6513F43, 0xF66A3F47, 0xF6833F4B,
    0xF69C3F4F, 0xF6B53F52, 0xF6CE3F56, 0xF6E73F5A, 0xF6FF3F5D, 0xF7183F61, 0xF7313F64, 0xF74A3F68,
    0xF7633F6B, 0xF77C3F6E, 0xF7953F72, 0xF7AE3F75, 0xF7C73F78, 0xF7E03F7B, 0xF7F93F7F, 0xF8113F82,
    0xF82A3F85, 0xF8433F88, 0xF85C3F8B, 0xF8753F8E, 0xF88E3F91, 0xF8A73F94, 0xF8C03F97, 0xF8D93F99,
    0xF8F23F9C, 0xF90B3F9F, 0xF9243FA2, 0xF93D3FA4, 0xF9563FA7, 0xF96F3FAA, 0xF9883FAC, 0xF9A13FAF,
    0xF9BA3FB1, 0xF9D33FB4, 0xF9EC3FB6, 0xFA053FB8, 0xFA1E3FBB, 0xFA373FBD, 0xFA503FBF, 0xFA693FC1,
    0xFA823FC4, 0xFA9B3FC6, 0xFAB43FC8, 0xFACD3FCA, 0xFAE63FCC, 0xFB003FCE, 0xFB193FD0, 0xFB323FD2,
    0xFB4B3FD4, 0xFB643FD5, 0xFB7D3FD7, 0xFB963FD9, 0xFBAF3FDB, 0xFBC83FDC, 0xFBE13FDE, 0xFBFA3FE0,
    0xFC133FE1, 0xFC2C3FE3, 0xFC453FE4, 0xFC5F3FE6, 0xFC783FE7, 0xFC913FE8, 0xFCAA3FEA, 0xFCC33FEB,
    0xFCDC3FEC, 0xFCF53FED, 0xFD0E3FEF, 0xFD273FF0, 0xFD403FF1, 0xFD5A3FF2, 0xFD733FF3, 0xFD8C3FF4,
    0xFDA53FF5, 0xFDBE3FF6, 0xFDD73FF7, 0xFDF03FF7, 0xFE093FF8, 0xFE233FF9, 0xFE3C3FFA, 0xFE553FFA,
    0xFE6E3FFB, 0xFE873FFC, 0xFEA03FFC, 0xFEB93FFD, 0xFED23FFD, 0xFEEC3FFE, 0xFF053FFE, 0xFF1E3FFE,
    0xFF373FFF, 0xFF503FFF, 0xFF693FFF, 0xFF824000, 0xFF9B4000, 0xFFB54000, 0xFFCE4000, 0xFFE74000,
};

const int16 atanTable[2050] = { // ROM
    0x0000, 0x0005, 0x000A, 0x000F, 0x0014, 0x0019, 0x001F, 0x0024,
    0x0029, 0x002E, 0x0033, 0x0038, 0x003D, 0x0042, 0x0047, 0x004C,
    0x0051, 0x0057, 0x005C, 0x0061, 0x0066, 0x006B, 0x0070, 0x0075,
    0x007A, 0x007F, 0x0084, 0x008A, 0x008F, 0x0094, 0x0099, 0x009E,
    0x00A3, 0x00A8, 0x00AD, 0x00B2, 0x00B7, 0x00BC, 0x00C2, 0x00C7,
    0x00CC, 0x00D1, 0x00D6, 0x00DB, 0x00E0, 0x00E5, 0x00EA, 0x00EF,
    0x00F4, 0x00FA, 0x00FF, 0x0104, 0x0109, 0x010E, 0x0113, 0x0118,
    0x011D, 0x0122, 0x0127, 0x012C, 0x0131, 0x0137, 0x013C, 0x0141,
    0x0146, 0x014B, 0x0150, 0x0155, 0x015A, 0x015F, 0x0164, 0x0169,
    0x016F, 0x0174, 0x0179, 0x017E, 0x0183, 0x0188, 0x018D, 0x0192,
    0x0197, 0x019C, 0x01A1, 0x01A6, 0x01AC, 0x01B1, 0x01B6, 0x01BB,
    0x01C0, 0x01C5, 0x01CA, 0x01CF, 0x01D4, 0x01D9, 0x01DE, 0x01E3,
    0x01E9, 0x01EE, 0x01F3, 0x01F8, 0x01FD, 0x0202, 0x0207, 0x020C,
    0x0211, 0x0216, 0x021B, 0x0220, 0x0226, 0x022B, 0x0230, 0x0235,
    0x023A, 0x023F, 0x0244, 0x0249, 0x024E, 0x0253, 0x0258, 0x025D,
    0x0262, 0x0268, 0x026D, 0x0272, 0x0277, 0x027C, 0x0281, 0x0286,
    0x028B, 0x0290, 0x0295, 0x029A, 0x029F, 0x02A4, 0x02A9, 0x02AF,
    0x02B4, 0x02B9, 0x02BE, 0x02C3, 0x02C8, 0x02CD, 0x02D2, 0x02D7,
    0x02DC, 0x02E1, 0x02E6, 0x02EB, 0x02F0, 0x02F6, 0x02FB, 0x0300,
    0x0305, 0x030A, 0x030F, 0x0314, 0x0319, 0x031E, 0x0323, 0x0328,
    0x032D, 0x0332, 0x0337, 0x033C, 0x0341, 0x0347, 0x034C, 0x0351,
    0x0356, 0x035B, 0x0360, 0x0365, 0x036A, 0x036F, 0x0374, 0x0379,
    0x037E, 0x0383, 0x0388, 0x038D, 0x0392, 0x0397, 0x039C, 0x03A2,
    0x03A7, 0x03AC, 0x03B1, 0x03B6, 0x03BB, 0x03C0, 0x03C5, 0x03CA,
    0x03CF, 0x03D4, 0x03D9, 0x03DE, 0x03E3, 0x03E8, 0x03ED, 0x03F2,
    0x03F7, 0x03FC, 0x0401, 0x0407, 0x040C, 0x0411, 0x0416, 0x041B,
    0x0420, 0x0425, 0x042A, 0x042F, 0x0434, 0x0439, 0x043E, 0x0443,
    0x0448, 0x044D, 0x0452, 0x0457, 0x045C, 0x0461, 0x0466, 0x046B,
    0x0470, 0x0475, 0x047A, 0x047F, 0x0484, 0x0489, 0x048E, 0x0494,
    0x0499, 0x049E, 0x04A3, 0x04A8, 0x04AD, 0x04B2, 0x04B7, 0x04BC,
    0x04C1, 0x04C6, 0x04CB, 0x04D0, 0x04D5, 0x04DA, 0x04DF, 0x04E4,
    0x04E9, 0x04EE, 0x04F3, 0x04F8, 0x04FD, 0x0502, 0x0507, 0x050C,
    0x0511, 0x0516, 0x051B, 0x0520, 0x0525, 0x052A, 0x052F, 0x0534,
    0x0539, 0x053E, 0x0543, 0x0548, 0x054D, 0x0552, 0x0557, 0x055C,
    0x0561, 0x0566, 0x056B, 0x0570, 0x0575, 0x057A, 0x057F, 0x0584,
    0x0589, 0x058E, 0x0593, 0x0598, 0x059D, 0x05A2, 0x05A7, 0x05AC,
    0x05B1, 0x05B6, 0x05BB, 0x05C0, 0x05C5, 0x05CA, 0x05CF, 0x05D4,
    0x05D9, 0x05DE, 0x05E3, 0x05E8, 0x05ED, 0x05F2, 0x05F7, 0x05FC,
    0x0601, 0x0606, 0x060B, 0x0610, 0x0615, 0x061A, 0x061F, 0x0624,
    0x0629, 0x062E, 0x0633, 0x0638, 0x063D, 0x0642, 0x0647, 0x064C,
    0x0651, 0x0656, 0x065B, 0x0660, 0x0665, 0x066A, 0x066E, 0x0673,
    0x0678, 0x067D, 0x0682, 0x0687, 0x068C, 0x0691, 0x0696, 0x069B,
    0x06A0, 0x06A5, 0x06AA, 0x06AF, 0x06B4, 0x06B9, 0x06BE, 0x06C3,
    0x06C8, 0x06CD, 0x06D2, 0x06D7, 0x06DC, 0x06E1, 0x06E5, 0x06EA,
    0x06EF, 0x06F4, 0x06F9, 0x06FE, 0x0703, 0x0708, 0x070D, 0x0712,
    0x0717, 0x071C, 0x0721, 0x0726, 0x072B, 0x0730, 0x0735, 0x0739,
    0x073E, 0x0743, 0x0748, 0x074D, 0x0752, 0x0757, 0x075C, 0x0761,
    0x0766, 0x076B, 0x0770, 0x0775, 0x077A, 0x077E, 0x0783, 0x0788,
    0x078D, 0x0792, 0x0797, 0x079C, 0x07A1, 0x07A6, 0x07AB, 0x07B0,
    0x07B5, 0x07B9, 0x07BE, 0x07C3, 0x07C8, 0x07CD, 0x07D2, 0x07D7,
    0x07DC, 0x07E1, 0x07E6, 0x07EB, 0x07EF, 0x07F4, 0x07F9, 0x07FE,
    0x0803, 0x0808, 0x080D, 0x0812, 0x0817, 0x081C, 0x0820, 0x0825,
    0x082A, 0x082F, 0x0834, 0x0839, 0x083E, 0x0843, 0x0848, 0x084C,
    0x0851, 0x0856, 0x085B, 0x0860, 0x0865, 0x086A, 0x086F, 0x0873,
    0x0878, 0x087D, 0x0882, 0x0887, 0x088C, 0x0891, 0x0896, 0x089A,
    0x089F, 0x08A4, 0x08A9, 0x08AE, 0x08B3, 0x08B8, 0x08BD, 0x08C1,
    0x08C6, 0x08CB, 0x08D0, 0x08D5, 0x08DA, 0x08DF, 0x08E3, 0x08E8,
    0x08ED, 0x08F2, 0x08F7, 0x08FC, 0x0901, 0x0905, 0x090A, 0x090F,
    0x0914, 0x0919, 0x091E, 0x0922, 0x0927, 0x092C, 0x0931, 0x0936,
    0x093B, 0x093F, 0x0944, 0x0949, 0x094E, 0x0953, 0x0958, 0x095C,
    0x0961, 0x0966, 0x096B, 0x0970, 0x0975, 0x0979, 0x097E, 0x0983,
    0x0988, 0x098D, 0x0992, 0x0996, 0x099B, 0x09A0, 0x09A5, 0x09AA,
    0x09AE, 0x09B3, 0x09B8, 0x09BD, 0x09C2, 0x09C6, 0x09CB, 0x09D0,
    0x09D5, 0x09DA, 0x09DE, 0x09E3, 0x09E8, 0x09ED, 0x09F2, 0x09F6,
    0x09FB, 0x0A00, 0x0A05, 0x0A0A, 0x0A0E, 0x0A13, 0x0A18, 0x0A1D,
    0x0A22, 0x0A26, 0x0A2B, 0x0A30, 0x0A35, 0x0A39, 0x0A3E, 0x0A43,
    0x0A48, 0x0A4D, 0x0A51, 0x0A56, 0x0A5B, 0x0A60, 0x0A64, 0x0A69,
    0x0A6E, 0x0A73, 0x0A77, 0x0A7C, 0x0A81, 0x0A86, 0x0A8B, 0x0A8F,
    0x0A94, 0x0A99, 0x0A9E, 0x0AA2, 0x0AA7, 0x0AAC, 0x0AB1, 0x0AB5,
    0x0ABA, 0x0ABF, 0x0AC4, 0x0AC8, 0x0ACD, 0x0AD2, 0x0AD7, 0x0ADB,
    0x0AE0, 0x0AE5, 0x0AE9, 0x0AEE, 0x0AF3, 0x0AF8, 0x0AFC, 0x0B01,
    0x0B06, 0x0B0B, 0x0B0F, 0x0B14, 0x0B19, 0x0B1E, 0x0B22, 0x0B27,
    0x0B2C, 0x0B30, 0x0B35, 0x0B3A, 0x0B3F, 0x0B43, 0x0B48, 0x0B4D,
    0x0B51, 0x0B56, 0x0B5B, 0x0B60, 0x0B64, 0x0B69, 0x0B6E, 0x0B72,
    0x0B77, 0x0B7C, 0x0B80, 0x0B85, 0x0B8A, 0x0B8F, 0x0B93, 0x0B98,
    0x0B9D, 0x0BA1, 0x0BA6, 0x0BAB, 0x0BAF, 0x0BB4, 0x0BB9, 0x0BBD,
    0x0BC2, 0x0BC7, 0x0BCB, 0x0BD0, 0x0BD5, 0x0BD9, 0x0BDE, 0x0BE3,
    0x0BE7, 0x0BEC, 0x0BF1, 0x0BF5, 0x0BFA, 0x0BFF, 0x0C03, 0x0C08,
    0x0C0D, 0x0C11, 0x0C16, 0x0C1B, 0x0C1F, 0x0C24, 0x0C29, 0x0C2D,
    0x0C32, 0x0C37, 0x0C3B, 0x0C40, 0x0C45, 0x0C49, 0x0C4E, 0x0C53,
    0x0C57, 0x0C5C, 0x0C60, 0x0C65, 0x0C6A, 0x0C6E, 0x0C73, 0x0C78,
    0x0C7C, 0x0C81, 0x0C86, 0x0C8A, 0x0C8F, 0x0C93, 0x0C98, 0x0C9D,
    0x0CA1, 0x0CA6, 0x0CAB, 0x0CAF, 0x0CB4, 0x0CB8, 0x0CBD, 0x0CC2,
    0x0CC6, 0x0CCB, 0x0CCF, 0x0CD4, 0x0CD9, 0x0CDD, 0x0CE2, 0x0CE6,
    0x0CEB, 0x0CF0, 0x0CF4, 0x0CF9, 0x0CFD, 0x0D02, 0x0D07, 0x0D0B,
    0x0D10, 0x0D14, 0x0D19, 0x0D1E, 0x0D22, 0x0D27, 0x0D2B, 0x0D30,
    0x0D34, 0x0D39, 0x0D3E, 0x0D42, 0x0D47, 0x0D4B, 0x0D50, 0x0D54,
    0x0D59, 0x0D5E, 0x0D62, 0x0D67, 0x0D6B, 0x0D70, 0x0D74, 0x0D79,
    0x0D7D, 0x0D82, 0x0D87, 0x0D8B, 0x0D90, 0x0D94, 0x0D99, 0x0D9D,
    0x0DA2, 0x0DA6, 0x0DAB, 0x0DAF, 0x0DB4, 0x0DB9, 0x0DBD, 0x0DC2,
    0x0DC6, 0x0DCB, 0x0DCF, 0x0DD4, 0x0DD8, 0x0DDD, 0x0DE1, 0x0DE6,
    0x0DEA, 0x0DEF, 0x0DF3, 0x0DF8, 0x0DFC, 0x0E01, 0x0E05, 0x0E0A,
    0x0E0F, 0x0E13, 0x0E18, 0x0E1C, 0x0E21, 0x0E25, 0x0E2A, 0x0E2E,
    0x0E33, 0x0E37, 0x0E3C, 0x0E40, 0x0E45, 0x0E49, 0x0E4E, 0x0E52,
    0x0E56, 0x0E5B, 0x0E5F, 0x0E64, 0x0E68, 0x0E6D, 0x0E71, 0x0E76,
    0x0E7A, 0x0E7F, 0x0E83, 0x0E88, 0x0E8C, 0x0E91, 0x0E95, 0x0E9A,
    0x0E9E, 0x0EA3, 0x0EA7, 0x0EAC, 0x0EB0, 0x0EB4, 0x0EB9, 0x0EBD,
    0x0EC2, 0x0EC6, 0x0ECB, 0x0ECF, 0x0ED4, 0x0ED8, 0x0EDC, 0x0EE1,
    0x0EE5, 0x0EEA, 0x0EEE, 0x0EF3, 0x0EF7, 0x0EFC, 0x0F00, 0x0F04,
    0x0F09, 0x0F0D, 0x0F12, 0x0F16, 0x0F1B, 0x0F1F, 0x0F23, 0x0F28,
    0x0F2C, 0x0F31, 0x0F35, 0x0F3A, 0x0F3E, 0x0F42, 0x0F47, 0x0F4B,
    0x0F50, 0x0F54, 0x0F58, 0x0F5D, 0x0F61, 0x0F66, 0x0F6A, 0x0F6E,
    0x0F73, 0x0F77, 0x0F7C, 0x0F80, 0x0F84, 0x0F89, 0x0F8D, 0x0F91,
    0x0F96, 0x0F9A, 0x0F9F, 0x0FA3, 0x0FA7, 0x0FAC, 0x0FB0, 0x0FB5,
    0x0FB9, 0x0FBD, 0x0FC2, 0x0FC6, 0x0FCA, 0x0FCF, 0x0FD3, 0x0FD7,
    0x0FDC, 0x0FE0, 0x0FE5, 0x0FE9, 0x0FED, 0x0FF2, 0x0FF6, 0x0FFA,
    0x0FFF, 0x1003, 0x1007, 0x100C, 0x1010, 0x1014, 0x1019, 0x101D,
    0x1021, 0x1026, 0x102A, 0x102E, 0x1033, 0x1037, 0x103B, 0x1040,
    0x1044, 0x1048, 0x104D, 0x1051, 0x1055, 0x105A, 0x105E, 0x1062,
    0x1067, 0x106B, 0x106F, 0x1073, 0x1078, 0x107C, 0x1080, 0x1085,
    0x1089, 0x108D, 0x1092, 0x1096, 0x109A, 0x109E, 0x10A3, 0x10A7,
    0x10AB, 0x10B0, 0x10B4, 0x10B8, 0x10BC, 0x10C1, 0x10C5, 0x10C9,
    0x10CE, 0x10D2, 0x10D6, 0x10DA, 0x10DF, 0x10E3, 0x10E7, 0x10EB,
    0x10F0, 0x10F4, 0x10F8, 0x10FD, 0x1101, 0x1105, 0x1109, 0x110E,
    0x1112, 0x1116, 0x111A, 0x111F, 0x1123, 0x1127, 0x112B, 0x1130,
    0x1134, 0x1138, 0x113C, 0x1140, 0x1145, 0x1149, 0x114D, 0x1151,
    0x1156, 0x115A, 0x115E, 0x1162, 0x1166, 0x116B, 0x116F, 0x1173,
    0x1177, 0x117C, 0x1180, 0x1184, 0x1188, 0x118C, 0x1191, 0x1195,
    0x1199, 0x119D, 0x11A1, 0x11A6, 0x11AA, 0x11AE, 0x11B2, 0x11B6,
    0x11BB, 0x11BF, 0x11C3, 0x11C7, 0x11CB, 0x11CF, 0x11D4, 0x11D8,
    0x11DC, 0x11E0, 0x11E4, 0x11E9, 0x11ED, 0x11F1, 0x11F5, 0x11F9,
    0x11FD, 0x1202, 0x1206, 0x120A, 0x120E, 0x1212, 0x1216, 0x121A,
    0x121F, 0x1223, 0x1227, 0x122B, 0x122F, 0x1233, 0x1237, 0x123C,
    0x1240, 0x1244, 0x1248, 0x124C, 0x1250, 0x1254, 0x1259, 0x125D,
    0x1261, 0x1265, 0x1269, 0x126D, 0x1271, 0x1275, 0x127A, 0x127E,
    0x1282, 0x1286, 0x128A, 0x128E, 0x1292, 0x1296, 0x129A, 0x129F,
    0x12A3, 0x12A7, 0x12AB, 0x12AF, 0x12B3, 0x12B7, 0x12BB, 0x12BF,
    0x12C3, 0x12C7, 0x12CC, 0x12D0, 0x12D4, 0x12D8, 0x12DC, 0x12E0,
    0x12E4, 0x12E8, 0x12EC, 0x12F0, 0x12F4, 0x12F8, 0x12FC, 0x1301,
    0x1305, 0x1309, 0x130D, 0x1311, 0x1315, 0x1319, 0x131D, 0x1321,
    0x1325, 0x1329, 0x132D, 0x1331, 0x1335, 0x1339, 0x133D, 0x1341,
    0x1345, 0x1349, 0x134D, 0x1351, 0x1355, 0x135A, 0x135E, 0x1362,
    0x1366, 0x136A, 0x136E, 0x1372, 0x1376, 0x137A, 0x137E, 0x1382,
    0x1386, 0x138A, 0x138E, 0x1392, 0x1396, 0x139A, 0x139E, 0x13A2,
    0x13A6, 0x13AA, 0x13AE, 0x13B2, 0x13B6, 0x13BA, 0x13BE, 0x13C2,
    0x13C6, 0x13CA, 0x13CE, 0x13D2, 0x13D6, 0x13DA, 0x13DE, 0x13E2,
    0x13E6, 0x13E9, 0x13ED, 0x13F1, 0x13F5, 0x13F9, 0x13FD, 0x1401,
    0x1405, 0x1409, 0x140D, 0x1411, 0x1415, 0x1419, 0x141D, 0x1421,
    0x1425, 0x1429, 0x142D, 0x1431, 0x1435, 0x1439, 0x143D, 0x1440,
    0x1444, 0x1448, 0x144C, 0x1450, 0x1454, 0x1458, 0x145C, 0x1460,
    0x1464, 0x1468, 0x146C, 0x1470, 0x1473, 0x1477, 0x147B, 0x147F,
    0x1483, 0x1487, 0x148B, 0x148F, 0x1493, 0x1497, 0x149B, 0x149E,
    0x14A2, 0x14A6, 0x14AA, 0x14AE, 0x14B2, 0x14B6, 0x14BA, 0x14BE,
    0x14C1, 0x14C5, 0x14C9, 0x14CD, 0x14D1, 0x14D5, 0x14D9, 0x14DD,
    0x14E0, 0x14E4, 0x14E8, 0x14EC, 0x14F0, 0x14F4, 0x14F8, 0x14FB,
    0x14FF, 0x1503, 0x1507, 0x150B, 0x150F, 0x1513, 0x1516, 0x151A,
    0x151E, 0x1522, 0x1526, 0x152A, 0x152D, 0x1531, 0x1535, 0x1539,
    0x153D, 0x1541, 0x1544, 0x1548, 0x154C, 0x1550, 0x1554, 0x1558,
    0x155B, 0x155F, 0x1563, 0x1567, 0x156B, 0x156E, 0x1572, 0x1576,
    0x157A, 0x157E, 0x1581, 0x1585, 0x1589, 0x158D, 0x1591, 0x1594,
    0x1598, 0x159C, 0x15A0, 0x15A4, 0x15A7, 0x15AB, 0x15AF, 0x15B3,
    0x15B7, 0x15BA, 0x15BE, 0x15C2, 0x15C6, 0x15C9, 0x15CD, 0x15D1,
    0x15D5, 0x15D8, 0x15DC, 0x15E0, 0x15E4, 0x15E8, 0x15EB, 0x15EF,
    0x15F3, 0x15F7, 0x15FA, 0x15FE, 0x1602, 0x1606, 0x1609, 0x160D,
    0x1611, 0x1614, 0x1618, 0x161C, 0x1620, 0x1623, 0x1627, 0x162B,
    0x162F, 0x1632, 0x1636, 0x163A, 0x163E, 0x1641, 0x1645, 0x1649,
    0x164C, 0x1650, 0x1654, 0x1658, 0x165B, 0x165F, 0x1663, 0x1666,
    0x166A, 0x166E, 0x1671, 0x1675, 0x1679, 0x167D, 0x1680, 0x1684,
    0x1688, 0x168B, 0x168F, 0x1693, 0x1696, 0x169A, 0x169E, 0x16A1,
    0x16A5, 0x16A9, 0x16AC, 0x16B0, 0x16B4, 0x16B7, 0x16BB, 0x16BF,
    0x16C2, 0x16C6, 0x16CA, 0x16CD, 0x16D1, 0x16D5, 0x16D8, 0x16DC,
    0x16E0, 0x16E3, 0x16E7, 0x16EB, 0x16EE, 0x16F2, 0x16F6, 0x16F9,
    0x16FD, 0x1700, 0x1704, 0x1708, 0x170B, 0x170F, 0x1713, 0x1716,
    0x171A, 0x171D, 0x1721, 0x1725, 0x1728, 0x172C, 0x1730, 0x1733,
    0x1737, 0x173A, 0x173E, 0x1742, 0x1745, 0x1749, 0x174C, 0x1750,
    0x1754, 0x1757, 0x175B, 0x175E, 0x1762, 0x1766, 0x1769, 0x176D,
    0x1770, 0x1774, 0x1778, 0x177B, 0x177F, 0x1782, 0x1786, 0x1789,
    0x178D, 0x1791, 0x1794, 0x1798, 0x179B, 0x179F, 0x17A2, 0x17A6,
    0x17AA, 0x17AD, 0x17B1, 0x17B4, 0x17B8, 0x17BB, 0x17BF, 0x17C2,
    0x17C6, 0x17C9, 0x17CD, 0x17D1, 0x17D4, 0x17D8, 0x17DB, 0x17DF,
    0x17E2, 0x17E6, 0x17E9, 0x17ED, 0x17F0, 0x17F4, 0x17F7, 0x17FB,
    0x17FE, 0x1802, 0x1806, 0x1809, 0x180D, 0x1810, 0x1814, 0x1817,
    0x181B, 0x181E, 0x1822, 0x1825, 0x1829, 0x182C, 0x1830, 0x1833,
    0x1837, 0x183A, 0x183E, 0x1841, 0x1845, 0x1848, 0x184C, 0x184F,
    0x1853, 0x1856, 0x185A, 0x185D, 0x1860, 0x1864, 0x1867, 0x186B,
    0x186E, 0x1872, 0x1875, 0x1879, 0x187C, 0x1880, 0x1883, 0x1887,
    0x188A, 0x188E, 0x1891, 0x1894, 0x1898, 0x189B, 0x189F, 0x18A2,
    0x18A6, 0x18A9, 0x18AD, 0x18B0, 0x18B3, 0x18B7, 0x18BA, 0x18BE,
    0x18C1, 0x18C5, 0x18C8, 0x18CC, 0x18CF, 0x18D2, 0x18D6, 0x18D9,
    0x18DD, 0x18E0, 0x18E3, 0x18E7, 0x18EA, 0x18EE, 0x18F1, 0x18F5,
    0x18F8, 0x18FB, 0x18FF, 0x1902, 0x1906, 0x1909, 0x190C, 0x1910,
    0x1913, 0x1917, 0x191A, 0x191D, 0x1921, 0x1924, 0x1928, 0x192B,
    0x192E, 0x1932, 0x1935, 0x1938, 0x193C, 0x193F, 0x1943, 0x1946,
    0x1949, 0x194D, 0x1950, 0x1953, 0x1957, 0x195A, 0x195D, 0x1961,
    0x1964, 0x1968, 0x196B, 0x196E, 0x1972, 0x1975, 0x1978, 0x197C,
    0x197F, 0x1982, 0x1986, 0x1989, 0x198C, 0x1990, 0x1993, 0x1996,
    0x199A, 0x199D, 0x19A0, 0x19A4, 0x19A7, 0x19AA, 0x19AE, 0x19B1,
    0x19B4, 0x19B8, 0x19BB, 0x19BE, 0x19C2, 0x19C5, 0x19C8, 0x19CC,
    0x19CF, 0x19D2, 0x19D5, 0x19D9, 0x19DC, 0x19DF, 0x19E3, 0x19E6,
    0x19E9, 0x19ED, 0x19F0, 0x19F3, 0x19F6, 0x19FA, 0x19FD, 0x1A00,
    0x1A04, 0x1A07, 0x1A0A, 0x1A0D, 0x1A11, 0x1A14, 0x1A17, 0x1A1B,
    0x1A1E, 0x1A21, 0x1A24, 0x1A28, 0x1A2B, 0x1A2E, 0x1A31, 0x1A35,
    0x1A38, 0x1A3B, 0x1A3E, 0x1A42, 0x1A45, 0x1A48, 0x1A4B, 0x1A4F,
    0x1A52, 0x1A55, 0x1A58, 0x1A5C, 0x1A5F, 0x1A62, 0x1A65, 0x1A69,
    0x1A6C, 0x1A6F, 0x1A72, 0x1A76, 0x1A79, 0x1A7C, 0x1A7F, 0x1A83,
    0x1A86, 0x1A89, 0x1A8C, 0x1A8F, 0x1A93, 0x1A96, 0x1A99, 0x1A9C,
    0x1A9F, 0x1AA3, 0x1AA6, 0x1AA9, 0x1AAC, 0x1AB0, 0x1AB3, 0x1AB6,
    0x1AB9, 0x1ABC, 0x1AC0, 0x1AC3, 0x1AC6, 0x1AC9, 0x1ACC, 0x1ACF,
    0x1AD3, 0x1AD6, 0x1AD9, 0x1ADC, 0x1ADF, 0x1AE3, 0x1AE6, 0x1AE9,
    0x1AEC, 0x1AEF, 0x1AF2, 0x1AF6, 0x1AF9, 0x1AFC, 0x1AFF, 0x1B02,
    0x1B05, 0x1B09, 0x1B0C, 0x1B0F, 0x1B12, 0x1B15, 0x1B18, 0x1B1C,
    0x1B1F, 0x1B22, 0x1B25, 0x1B28, 0x1B2B, 0x1B2E, 0x1B32, 0x1B35,
    0x1B38, 0x1B3B, 0x1B3E, 0x1B41, 0x1B44, 0x1B48, 0x1B4B, 0x1B4E,
    0x1B51, 0x1B54, 0x1B57, 0x1B5A, 0x1B5D, 0x1B61, 0x1B64, 0x1B67,
    0x1B6A, 0x1B6D, 0x1B70, 0x1B73, 0x1B76, 0x1B79, 0x1B7D, 0x1B80,
    0x1B83, 0x1B86, 0x1B89, 0x1B8C, 0x1B8F, 0x1B92, 0x1B95, 0x1B98,
    0x1B9C, 0x1B9F, 0x1BA2, 0x1BA5, 0x1BA8, 0x1BAB, 0x1BAE, 0x1BB1,
    0x1BB4, 0x1BB7, 0x1BBA, 0x1BBD, 0x1BC1, 0x1BC4, 0x1BC7, 0x1BCA,
    0x1BCD, 0x1BD0, 0x1BD3, 0x1BD6, 0x1BD9, 0x1BDC, 0x1BDF, 0x1BE2,
    0x1BE5, 0x1BE8, 0x1BEB, 0x1BEE, 0x1BF2, 0x1BF5, 0x1BF8, 0x1BFB,
    0x1BFE, 0x1C01, 0x1C04, 0x1C07, 0x1C0A, 0x1C0D, 0x1C10, 0x1C13,
    0x1C16, 0x1C19, 0x1C1C, 0x1C1F, 0x1C22, 0x1C25, 0x1C28, 0x1C2B,
    0x1C2E, 0x1C31, 0x1C34, 0x1C37, 0x1C3A, 0x1C3D, 0x1C40, 0x1C43,
    0x1C46, 0x1C49, 0x1C4C, 0x1C4F, 0x1C52, 0x1C55, 0x1C58, 0x1C5B,
    0x1C5E, 0x1C61, 0x1C64, 0x1C67, 0x1C6A, 0x1C6D, 0x1C70, 0x1C73,
    0x1C76, 0x1C79, 0x1C7C, 0x1C7F, 0x1C82, 0x1C85, 0x1C88, 0x1C8B,
    0x1C8E, 0x1C91, 0x1C94, 0x1C97, 0x1C9A, 0x1C9D, 0x1CA0, 0x1CA3,
    0x1CA6, 0x1CA9, 0x1CAC, 0x1CAF, 0x1CB2, 0x1CB5, 0x1CB8, 0x1CBB,
    0x1CBE, 0x1CC1, 0x1CC3, 0x1CC6, 0x1CC9, 0x1CCC, 0x1CCF, 0x1CD2,
    0x1CD5, 0x1CD8, 0x1CDB, 0x1CDE, 0x1CE1, 0x1CE4, 0x1CE7, 0x1CEA,
    0x1CED, 0x1CF0, 0x1CF3, 0x1CF5, 0x1CF8, 0x1CFB, 0x1CFE, 0x1D01,
    0x1D04, 0x1D07, 0x1D0A, 0x1D0D, 0x1D10, 0x1D13, 0x1D16, 0x1D18,
    0x1D1B, 0x1D1E, 0x1D21, 0x1D24, 0x1D27, 0x1D2A, 0x1D2D, 0x1D30,
    0x1D33, 0x1D35, 0x1D38, 0x1D3B, 0x1D3E, 0x1D41, 0x1D44, 0x1D47,
    0x1D4A, 0x1D4D, 0x1D4F, 0x1D52, 0x1D55, 0x1D58, 0x1D5B, 0x1D5E,
    0x1D61, 0x1D64, 0x1D66, 0x1D69, 0x1D6C, 0x1D6F, 0x1D72, 0x1D75,
    0x1D78, 0x1D7B, 0x1D7D, 0x1D80, 0x1D83, 0x1D86, 0x1D89, 0x1D8C,
    0x1D8E, 0x1D91, 0x1D94, 0x1D97, 0x1D9A, 0x1D9D, 0x1DA0, 0x1DA2,
    0x1DA5, 0x1DA8, 0x1DAB, 0x1DAE, 0x1DB1, 0x1DB3, 0x1DB6, 0x1DB9,
    0x1DBC, 0x1DBF, 0x1DC2, 0x1DC4, 0x1DC7, 0x1DCA, 0x1DCD, 0x1DD0,
    0x1DD3, 0x1DD5, 0x1DD8, 0x1DDB, 0x1DDE, 0x1DE1, 0x1DE3, 0x1DE6,
    0x1DE9, 0x1DEC, 0x1DEF, 0x1DF1, 0x1DF4, 0x1DF7, 0x1DFA, 0x1DFD,
    0x1DFF, 0x1E02, 0x1E05, 0x1E08, 0x1E0B, 0x1E0D, 0x1E10, 0x1E13,
    0x1E16, 0x1E19, 0x1E1B, 0x1E1E, 0x1E21, 0x1E24, 0x1E26, 0x1E29,
    0x1E2C, 0x1E2F, 0x1E32, 0x1E34, 0x1E37, 0x1E3A, 0x1E3D, 0x1E3F,
    0x1E42, 0x1E45, 0x1E48, 0x1E4A, 0x1E4D, 0x1E50, 0x1E53, 0x1E55,
    0x1E58, 0x1E5B, 0x1E5E, 0x1E60, 0x1E63, 0x1E66, 0x1E69, 0x1E6B,
    0x1E6E, 0x1E71, 0x1E74, 0x1E76, 0x1E79, 0x1E7C, 0x1E7F, 0x1E81,
    0x1E84, 0x1E87, 0x1E8A, 0x1E8C, 0x1E8F, 0x1E92, 0x1E94, 0x1E97,
    0x1E9A, 0x1E9D, 0x1E9F, 0x1EA2, 0x1EA5, 0x1EA8, 0x1EAA, 0x1EAD,
    0x1EB0, 0x1EB2, 0x1EB5, 0x1EB8, 0x1EBA, 0x1EBD, 0x1EC0, 0x1EC3,
    0x1EC5, 0x1EC8, 0x1ECB, 0x1ECD, 0x1ED0, 0x1ED3, 0x1ED5, 0x1ED8,
    0x1EDB, 0x1EDE, 0x1EE0, 0x1EE3, 0x1EE6, 0x1EE8, 0x1EEB, 0x1EEE,
    0x1EF0, 0x1EF3, 0x1EF6, 0x1EF8, 0x1EFB, 0x1EFE, 0x1F00, 0x1F03,
    0x1F06, 0x1F08, 0x1F0B, 0x1F0E, 0x1F10, 0x1F13, 0x1F16, 0x1F18,
    0x1F1B, 0x1F1E, 0x1F20, 0x1F23, 0x1F26, 0x1F28, 0x1F2B, 0x1F2E,
    0x1F30, 0x1F33, 0x1F36, 0x1F38, 0x1F3B, 0x1F3D, 0x1F40, 0x1F43,
    0x1F45, 0x1F48, 0x1F4B, 0x1F4D, 0x1F50, 0x1F53, 0x1F55, 0x1F58,
    0x1F5A, 0x1F5D, 0x1F60, 0x1F62, 0x1F65, 0x1F68, 0x1F6A, 0x1F6D,
    0x1F6F, 0x1F72, 0x1F75, 0x1F77, 0x1F7A, 0x1F7C, 0x1F7F, 0x1F82,
    0x1F84, 0x1F87, 0x1F8A, 0x1F8C, 0x1F8F, 0x1F91, 0x1F94, 0x1F97,
    0x1F99, 0x1F9C, 0x1F9E, 0x1FA1, 0x1FA4, 0x1FA6, 0x1FA9, 0x1FAB,
    0x1FAE, 0x1FB0, 0x1FB3, 0x1FB6, 0x1FB8, 0x1FBB, 0x1FBD, 0x1FC0,
    0x1FC3, 0x1FC5, 0x1FC8, 0x1FCA, 0x1FCD, 0x1FCF, 0x1FD2, 0x1FD5,
    0x1FD7, 0x1FDA, 0x1FDC, 0x1FDF, 0x1FE1, 0x1FE4, 0x1FE6, 0x1FE9,
    0x1FEC, 0x1FEE, 0x1FF1, 0x1FF3, 0x1FF6, 0x1FF8, 0x1FFB, 0x1FFD,
    0x2000, 0x2000,
};

const int32 atanOctant[] = {
    0, -16384, -65535, 49152, -32768, 16384, 32768, -49152
};

int32 phd_atan(int32 x, int32 y)
{
    if (x == 0 && y == 0)
        return 0;

    int32 o = 0;

    if (x < 0) {
        o += 4;
        x = -x;
    }

    if (y < 0) {
        o += 2;
        y = -y;
    }

    if (y > x) {
        o++;
        swap(x, y);
    }

    return abs(atanTable[(y << 11) / x] + atanOctant[o]); //@DIV
}

uint32 phd_sqrt(uint32 x)
{
    uint32 m = 0x40000000;
    uint32 y = 0;
    uint32 z = 0;

    do {
        y += m;

        if (y > x) {
            y = z;
        } else {
            x -= y;
            y = z + m;
        }

        z = y >> 1;
    } while (m >>= 2);

    return y;
}

void anglesFromVector(int32 x, int32 y, int32 z, int16 &angleX, int16 &angleY)
{
    angleY = phd_atan(z, x);
    angleX = phd_atan(phd_sqrt(x * x + z * z), -y);
}

bool boxIntersect(const AABBi &a, const AABBi &b)
{
    return !(a.maxX <= b.minX || a.minX >= b.maxX || 
             a.maxY <= b.minY || a.minY >= b.maxY || 
             a.maxZ <= b.minZ || a.minZ >= b.maxZ);
}

bool boxContains(const AABBi &a, const vec3i &p)
{
    return !(a.minX > p.x || a.maxX < p.x ||
             a.minY > p.y || a.maxY < p.y ||
             a.minZ > p.z || a.maxZ < p.z);
}

vec3i boxPushOut(const AABBi &a, const AABBi &b)
{
    int32 ax = b.maxX - a.minX;
    int32 bx = a.maxX - b.minX;
    int32 az = b.maxZ - a.minZ;
    int32 bz = a.maxZ - b.minZ;

    vec3i p;
    p.y = 0;
    p.x = (ax < bx) ? -ax : bx;
    p.z = (az < bz) ? -az : bz;

    return p;
}

/*
#ifdef USE_DIV_TABLE
void initDivTable()
{
    uint16 divTable[DIV_TABLE_SIZE];

    divTable[0] = 0xFFFF;
    divTable[1] = 0xFFFF;
    for (uint32 i = 2; i < DIV_TABLE_SIZE; i++) {
        divTable[i] = (1 << 16) / i;
    }

    ASSERT((DIV_TABLE_SIZE & 8) == 0)

    printf("const uint16 divTable[DIV_TABLE_SIZE] = {\n");
    for (int i = 0; i < DIV_TABLE_SIZE; i += 8) {
        printf("    0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X, 0x%04X,\n", 
            divTable[i + 0], divTable[i + 1], divTable[i + 2], divTable[i + 3],
            divTable[i + 4], divTable[i + 5], divTable[i + 6], divTable[i + 7]);
    }
    printf("};\n");
}
#endif
*/

X_INLINE int16 lerpAngle(int16 a, int16 b, int32 t)
{
    int32 d = b - a;

    if (d > 0x8000) {
        d -= 0x10000;
    } else if (d < -0x8000) {
        d += 0x10000;
    }

    return a + ((d * t) >> FIXED_SHIFT);
}

X_INLINE int16 lerpAngleSlow(int16 a, int16 b, int32 mul, int32 div)
{
    int32 d = b - a;

    if (d > 0x8000) {
        d -= 0x10000;
    } else if (d < -0x8000) {
        d += 0x10000;
    }

    return a + d * mul / div;
}

#ifndef USE_ASM
void matrixPush_c()
{
    ASSERT(gMatrixPtr - gMatrixStack < MAX_MATRICES);
    gMatrixPtr[1] = gMatrixPtr[0];
    gMatrixPtr++;
}

void matrixSetIdentity_c()
{
    Matrix &m = matrixGet();

    m.e00 = 0x4000;
    m.e01 = 0;
    m.e02 = 0;
    m.e03 = 0;

    m.e10 = 0;
    m.e11 = 0x4000;
    m.e12 = 0;
    m.e13 = 0;

    m.e20 = 0;
    m.e21 = 0;
    m.e22 = 0x4000;
    m.e23 = 0;
}

void matrixSetBasis_c(Matrix &dst, const Matrix &src)
{
    dst.e00 = src.e00;
    dst.e01 = src.e01;
    dst.e02 = src.e02;

    dst.e10 = src.e10;
    dst.e11 = src.e11;
    dst.e12 = src.e12;

    dst.e10 = src.e10;
    dst.e11 = src.e11;
    dst.e12 = src.e12;
}

#define LERP_1_2(a, b)   a = (b + a) >> 1
#define LERP_1_3(a, b)   a = a + (b - a) / 3
#define LERP_2_3(a, b)   a = b - (b - a) / 3
#define LERP_1_4(a, b)   a = a + ((b - a) >> 2)
#define LERP_3_4(a, b)   a = b - ((b - a) >> 2)
#define LERP_1_5(a, b)   a = a + (b - a) / 5
#define LERP_2_5(a, b)   a = a + ((b - a) << 1) / 5
#define LERP_3_5(a, b)   a = b - ((b - a) << 1) / 5
#define LERP_4_5(a, b)   a = b - (b - a) / 5
#define LERP_SLOW(a, b)  a = a + ((b - a) * t >> 8)

#define LERP_ROW(lerp_func, a, b, row) \
    lerp_func(a.e##row##0, b.e##row##0); \
    lerp_func(a.e##row##1, b.e##row##1); \
    lerp_func(a.e##row##2, b.e##row##2); \
    lerp_func(a.e##row##3, b.e##row##3);

#define LERP_MATRIX(lerp_func) \
    LERP_ROW(lerp_func, m, n, 0); \
    LERP_ROW(lerp_func, m, n, 1); \
    LERP_ROW(lerp_func, m, n, 2);

void matrixLerp_c(const Matrix &n, int32 pmul, int32 pdiv)
{
    Matrix &m = matrixGet();

    if ((pdiv == 2) || ((pdiv == 4) && (pmul == 2))) {
        LERP_MATRIX(LERP_1_2);
    } else if (pdiv == 4) {

        if (pmul == 1) {
            LERP_MATRIX(LERP_1_4);
        } else {
            LERP_MATRIX(LERP_3_4);
        }

    } else {
        int32 t = pmul * FixedInvU(pdiv) >> 8;
        LERP_MATRIX(LERP_SLOW);
    }
}

#define MATRIX_TRANS(x,y,z)\
    Matrix &m = matrixGet();\
    int32 tx = DP33(m.e00, m.e01, m.e02, x, y, z);\
    int32 ty = DP33(m.e10, m.e11, m.e12, x, y, z);\
    int32 tz = DP33(m.e20, m.e21, m.e22, x, y, z);

void matrixTranslateRel_c(int32 x, int32 y, int32 z)
{
    MATRIX_TRANS(x, y, z);
    m.e03 += tx >> MATRIX_FIXED_SHIFT;
    m.e13 += ty >> MATRIX_FIXED_SHIFT;
    m.e23 += tz >> MATRIX_FIXED_SHIFT;
}

void matrixTranslateAbs_c(int32 x, int32 y, int32 z)
{
    x -= gCameraViewPos.x;
    y -= gCameraViewPos.y;
    z -= gCameraViewPos.z;
    MATRIX_TRANS(x, y, z);
    m.e03 = tx >> MATRIX_FIXED_SHIFT;
    m.e13 = ty >> MATRIX_FIXED_SHIFT;
    m.e23 = tz >> MATRIX_FIXED_SHIFT;
}

void matrixTranslateSet_c(int32 x, int32 y, int32 z)
{
    MATRIX_TRANS(x, y, z);
    m.e03 = tx >> MATRIX_FIXED_SHIFT;
    m.e13 = ty >> MATRIX_FIXED_SHIFT;
    m.e23 = tz >> MATRIX_FIXED_SHIFT;
}

void matrixRotateX_c(int32 angle)
{
    int32 s, c;
    sincos(angle, s, c);

    Matrix &m = matrixGet();
    X_ROTXY(m.e02, m.e01, s, c);
    X_ROTXY(m.e12, m.e11, s, c);
    X_ROTXY(m.e22, m.e21, s, c);
}

void matrixRotateY_c(int32 angle)
{
    int32 s, c;
    sincos(angle, s, c);

    Matrix &m = matrixGet();
    X_ROTXY(m.e00, m.e02, s, c);
    X_ROTXY(m.e10, m.e12, s, c);
    X_ROTXY(m.e20, m.e22, s, c);
}

void matrixRotateZ_c(int32 angle)
{
    int32 s, c;
    sincos(angle, s, c);

    Matrix &m = matrixGet();
    X_ROTXY(m.e01, m.e00, s, c);
    X_ROTXY(m.e11, m.e10, s, c);
    X_ROTXY(m.e21, m.e20, s, c);
}

void matrixRotateYQ_c(int32 quadrant)
{
    if (quadrant == 2)
        return;

    Matrix &m = matrixGet();

    if (quadrant == 0) {
        m.e00 = -m.e00;
        m.e10 = -m.e10;
        m.e20 = -m.e20;
        m.e02 = -m.e02;
        m.e12 = -m.e12;
        m.e22 = -m.e22;
    } else if (quadrant == 1) {
        int32 e0 = m.e02;
        int32 e1 = m.e12;
        int32 e2 = m.e22;

        m.e02 = -m.e00;
        m.e12 = -m.e10;
        m.e22 = -m.e20;

        m.e00 = e0;
        m.e10 = e1;
        m.e20 = e2;
    } else {
        int32 e0 = m.e02;
        int32 e1 = m.e12;
        int32 e2 = m.e22;

        m.e02 = m.e00;
        m.e12 = m.e10;
        m.e22 = m.e20;

        m.e00 = -e0;
        m.e10 = -e1;
        m.e20 = -e2;
    }
}

void matrixRotateYXZ_c(int32 angleX, int32 angleY, int32 angleZ)
{
    if (angleY) matrixRotateY(angleY);
    if (angleX) matrixRotateX(angleX);
    if (angleZ) matrixRotateZ(angleZ);
}

void matrixFrame_c(const void* pos, const void* angles)
{
    int16 aX, aY, aZ;
    DECODE_ANGLES(*(uint32*)angles, aX, aY, aZ);

    uint32 xy = ((uint32*)pos)[0];
    uint32 zu = ((uint32*)pos)[1];

#ifdef CPU_BIG_ENDIAN
    int32 posX = int16(xy >> 16);
    int32 posY = int16(xy & 0xFFFF);
    int32 posZ = int16(zu >> 16);
#else
    int32 posX = int16(xy & 0xFFFF);
    int32 posY = int16(xy >> 16);
    int32 posZ = int16(zu & 0xFFFF);
#endif

    matrixTranslateRel(posX, posY, posZ);
    matrixRotateYXZ(aX, aY, aZ);
}

void boxTranslate_c(AABBi &box, int32 x, int32 y, int32 z)
{
    box.minX += x;
    box.maxX += x;
    box.minY += y;
    box.maxY += y;
    box.minZ += z;
    box.maxZ += z;
}

void boxRotateYQ_c(AABBi &box, int32 quadrant)
{
    if (quadrant == 2)
        return;

    int32 minX = box.minX;
    int32 maxX = box.maxX;
    int32 minZ = box.minZ;
    int32 maxZ = box.maxZ;

    if (quadrant == 3) {
        box.minX = minZ;
        box.maxX = maxZ;
        box.minZ = -maxX;
        box.maxZ = -minX;
    } else if (quadrant == 1) {
        box.minX = -maxZ;
        box.maxX = -minZ;
        box.minZ = minX;
        box.maxZ = maxX;
    } else if (quadrant == 0) {
        box.minX = -maxX;
        box.maxX = -minX;
        box.minZ = -maxZ;
        box.maxZ = -minZ;
    }
}
#endif

void matrixFrameLerp(const void* pos, const void* anglesA, const void* anglesB, int32 delta, int32 rate)
{
    int16 aX, aY, aZ;
    int16 bX, bY, bZ;

    DECODE_ANGLES(*(uint32*)anglesA, aX, aY, aZ);
    DECODE_ANGLES(*(uint32*)anglesB, bX, bY, bZ);

    uint32 xy = ((uint32*)pos)[0];
    uint32 zu = ((uint32*)pos)[1];

#ifdef CPU_BIG_ENDIAN
    int32 posX = int16(xy >> 16);
    int32 posY = int16(xy & 0xFFFF);
    int32 posZ = int16(zu >> 16);
#else
    int32 posX = int16(xy & 0xFFFF);
    int32 posY = int16(xy >> 16);
    int32 posZ = int16(zu & 0xFFFF);
#endif

    matrixTranslateRel(posX, posY, posZ);
    
    matrixPush();
    matrixRotateYXZ(bX, bY, bZ);
    matrixPop();

    matrixRotateYXZ(aX, aY, aZ);

    matrixLerp(*(gMatrixPtr + 1), delta, rate);
}

void matrixSetView(const vec3i &pos, int32 angleX, int32 angleY)
{
    int32 sx, cx;
    int32 sy, cy;

    sincos(angleX, sx, cx);
    sincos(angleY, sy, cy);

    Matrix &m = matrixGet();

    m.e00 = cy;
    m.e01 = 0;
    m.e02 = -sy;
    m.e03 = 0;

    m.e10 = (sx * sy) >> FIXED_SHIFT;
    m.e11 = cx;
    m.e12 = (sx * cy) >> FIXED_SHIFT;
    m.e13 = 0;

    m.e20 = (cx * sy) >> FIXED_SHIFT;
    m.e21 = -sx;
    m.e22 = (cx * cy) >> FIXED_SHIFT;
    m.e23 = 0;

    gCameraViewPos = pos;
}

void CollisionInfo::setSide(CollisionInfo::SideType st, int32 floor, int32 ceiling)
{
    SlantType slantType;

    if (FD_SLANT_X(gLastFloorSlant) == 0 && FD_SLANT_Z(gLastFloorSlant) == 0) {
        slantType = SLANT_NONE;
    } else if (abs(FD_SLANT_X(gLastFloorSlant)) < 3 && abs(FD_SLANT_Z(gLastFloorSlant)) < 3) {
        slantType = SLANT_LOW;
    } else {
        slantType = SLANT_HIGH;
    }

    if (st != ST_MIDDLE) {
        if (stopOnSlant && floor < 0 && slantType == SLANT_HIGH) {
            floor = -0x7FFF;
        } else if (stopOnSlant && floor > 0 && slantType == SLANT_HIGH) {
            floor = 512;
        }/* TODO lava else if (stopOnLava && floor > 0 && trigger && FloorData(*(uint16*)trigger).cmd.func == FloorData::LAVA) {
            floor = 512;
        }*/
    }

    Side *s = &m + st;
    s->slantType = slantType;
    s->floor     = floor;
    s->ceiling   = ceiling;
}

void palGamma(const uint16* srcPal, uint16* dstPal, int32 value)
{
    for (int32 i = 0; i < 256; i++)
    {
        uint16 src = *srcPal++;
        int32 r = 31 & (src);
        int32 g = 31 & (src >> 5);
        int32 b = 31 & (src >> 10);

        r = X_MIN(31, r + (((r * r >> 2) - r) * value >> 10));
        g = X_MIN(31, g + (((g * g >> 2) - g) * value >> 10));
        b = X_MIN(31, b + (((b * b >> 2) - b) * value >> 10));

        *dstPal++ = r | (g << 5) | (b << 10);
    }
}

void palBright(const uint16* srcPal, uint16* dstPal, int32 value)
{
    value >>= 2;

    for (int32 i = 0; i < 256; i++)
    {
        uint16 src = *srcPal++;
        int32 r = 31 & (src);
        int32 g = 31 & (src >> 5);
        int32 b = 31 & (src >> 10);

        r = X_CLAMP(r + value, 0, 31);
        g = X_CLAMP(g + value, 0, 31);
        b = X_CLAMP(b + value, 0, 31);

        *dstPal++ = r | (g << 5) | (b << 10);
    }
}

void palGrayRemap(uint8* data, int32 size)
{
    static const uint8 grad[8] = {
        1, 22, 21, 20, 19, 18, 17, 33
    };

    uint8 remap[256];

    for (int32 i = 0; i < 256; i++)
    {
        uint16 p = level.palette[i];
        uint8 r = (p & 31);
        uint8 g = ((p >> 5) & 31);
        uint8 b = ((p >> 10) & 31);

        int32 lum = (r * 77 + g * 150 + b * 29) >> (8 + 2);

        remap[i] = grad[lum];
    }

    for (int32 i = 0; i < size; i++)
    {
        data[i] = remap[data[i]];
    }
}

void palSet(const uint16* palette, int32 gamma, int32 bright)
{
    const uint16* pal = palette;

    if (gamma || bright)
    {
        //STATIC_ASSERT(sizeof(gSpheres) >= 512);
        uint16* tmp = (uint16*)gSpheres;

        if (gamma) {
            palGamma(pal, tmp, gamma);
            pal = tmp;
        }

        if (bright) {
            palBright(pal, tmp, bright);
            pal = tmp;
        }
    }

    osSetPalette(pal);
}

void dmaFill(void* dst, uint8 value, uint32 count)
{
    ASSERT((count & 3) == 0);
#if defined(__GBA__)
    vu32 v = value;
    dma3_fill(dst, v, count);
#elif defined(__32X__)
    fast_memset(dst, value, count >> 2);
#else
    memset(dst, value, count);
#endif
}

#ifndef __NDS__
void dmaCopy(const void* src, void* dst, uint32 size)
{
    ASSERT((size & 3) == 0);
#if defined(__GBA__)
    dma3_cpy(dst, src, size);
#elif defined(__32X__)
    fast_memcpy(dst, src, size >> 2);
#else
    memcpy(dst, src, size);
#endif
}

#endif
